{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"mkdocstrings","text":"<p>Automatic documentation from sources, for MkDocs. Come have a chat or ask questions on our Gitter channel.</p> <p>Features - Installation - Quick usage</p> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>Language-agnostic:   just like MkDocs, mkdocstrings is written in Python but is language-agnostic.   It means you can use it with any programming language, as long as there is a   handler for it.   We currently have handlers for the   C,   Crystal,   Python,   TypeScript, and   VBA languages,   as well as for shell scripts/libraries.   Maybe you'd like to add another one to the list? </p> </li> <li> <p>Multiple themes support:   each handler can offer multiple themes. Currently, we offer the    Material theme    as well as basic support for the ReadTheDocs and MkDocs themes for the Python handler.</p> </li> <li> <p>Cross-references across pages: mkdocstrings makes it possible to reference headings in other Markdown files with the classic Markdown linking   syntax: <code>[identifier][]</code> or <code>[title][identifier]</code> -- and you don't need to remember which exact page this object was   on. This works for any heading that's produced by a mkdocstrings language handler, and you can opt to include   any Markdown heading into the global referencing scheme.</p> <p>Note: in versions prior to 0.15 all Markdown headers were included, but now you need to opt in.</p> </li> <li> <p>Cross-references across sites:   similarly to Sphinx's intersphinx extension,   mkdocstrings can reference API items from other libraries, given they provide an inventory and you load   that inventory in your MkDocs configuration.</p> </li> <li> <p>Inline injection in Markdown:   instead of generating Markdown files, mkdocstrings allows you to inject   documentation anywhere in your Markdown contents. The syntax is simple: <code>::: identifier</code> followed by a 4-spaces   indented YAML block. The identifier and YAML configuration will be passed to the appropriate handler   to collect and render documentation.</p> </li> <li> <p>Global and local configuration:   each handler can be configured globally in <code>mkdocs.yml</code>, and locally for each   \"autodoc\" instruction.</p> </li> <li> <p>Reasonable defaults:   you should be able to just drop the plugin in your configuration and enjoy your auto-generated docs.</p> </li> </ul>"},{"location":"#used-by","title":"Used by","text":"<p>mkdocstrings is used by well-known companies, projects and scientific teams: Ansible, Apache, FastAPI, Google, Jitsi, Microsoft, Prefect, Pydantic, and more...</p>"},{"location":"#installation","title":"Installation","text":"<p>With <code>pip</code>:</p> <pre><code>pip install mkdocstrings\n</code></pre> <p>You can install support for specific languages using extras, for example:</p> <pre><code>pip install 'mkdocstrings[crystal,python]'\n</code></pre> <p>See the available language handlers.</p> <p>With <code>conda</code>:</p> <pre><code>conda install -c conda-forge mkdocstrings\n</code></pre>"},{"location":"#quick-usage","title":"Quick usage","text":"<p>In <code>mkdocs.yml</code>:</p> <pre><code>site_name: \"My Library\"\n\ntheme:\n  name: \"material\"\n\nplugins:\n- search\n- mkdocstrings\n</code></pre> <p>In one of your markdown files:</p> <pre><code># Reference\n\n::: my_library.my_module.my_class\n</code></pre> <p>See the Usage section of the docs for more examples!</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#0260-2024-09-02","title":"0.26.0 - 2024-09-02","text":"<p>Compare with 0.25.2</p>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>Upgrade Python-Markdown lower bound to 3.6 (28565f9 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#dependencies","title":"Dependencies","text":"<ul> <li>Depend on mkdocs-autorefs v1 (33aa573 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Allow hooking into autorefs when converting Markdown docstrings (b63e726 by Timoth\u00e9e Mazzucotelli). Based-on-PR-autorefs#46</li> </ul>"},{"location":"changelog/#0252-2024-07-25","title":"0.25.2 - 2024-07-25","text":"<p>Compare with 0.25.1</p>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Give precedence to Markdown heading level (<code>##</code>) (2e5f89e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0251-2024-05-05","title":"0.25.1 - 2024-05-05","text":"<p>Compare with 0.25.0</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Always descend into sub-headings when re-applying their label (cb86e08 by Timoth\u00e9e Mazzucotelli). Issue-mkdocstrings/python-158</li> </ul>"},{"location":"changelog/#0250-2024-04-27","title":"0.25.0 - 2024-04-27","text":"<p>Compare with 0.24.3</p>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Support <code>once</code> parameter in logging methods, allowing to log a message only once with a given logger (1532b59 by Timoth\u00e9e Mazzucotelli).</li> <li>Support blank line between <code>::: path</code> and YAML options (d799d2f by Timoth\u00e9e Mazzucotelli). Issue-450</li> </ul>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Allow specifying name of template loggers (c5b5f69 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0243-2024-04-05","title":"0.24.3 - 2024-04-05","text":"<p>Compare with 0.24.2</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Support HTML toc labels with Python-Markdown 3.6+ (uncomment code...) (7fe3e5f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0242-2024-04-02","title":"0.24.2 - 2024-04-02","text":"<p>Compare with 0.24.1</p>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Support HTML toc labels with Python-Markdown 3.6+ (c0d0090 by Timoth\u00e9e Mazzucotelli). Issue-mkdocstrings/python-143</li> </ul>"},{"location":"changelog/#0241-2024-02-27","title":"0.24.1 - 2024-02-27","text":"<p>Compare with 0.24.0</p>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>Support new pymdownx-highlight options (a7a2907 by Timoth\u00e9e Mazzucotelli).</li> <li>Backup anchors with id and no href, for compatibility with autorefs' Markdown anchors (b5236b4 by Timoth\u00e9e Mazzucotelli). PR-#651, Related-to-mkdocs-autorefs#39, Co-authored-by: Oleh Prypin oleh@pryp.in</li> </ul>"},{"location":"changelog/#0240-2023-11-14","title":"0.24.0 - 2023-11-14","text":"<p>Compare with 0.23.0</p>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Cache downloaded inventories as local file (ce84dd5 by Oleh Prypin). PR #632</li> </ul>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Make <code>custom_templates</code> relative to the config file (370a61d by Waylan Limberg). Issue #477, PR #627</li> <li>Remove duplicated headings for docstrings nested in tabs/admonitions (e2123a9 by Perceval Wajsburt, f4a94f7 by Oleh Prypin). Issue #609, PR #610, PR #613</li> </ul>"},{"location":"changelog/#code-refactoring_3","title":"Code Refactoring","text":"<ul> <li>Drop support for MkDocs &lt; 1.4, modernize usages (b61d4d1 by Oleh Prypin). PR #629</li> </ul>"},{"location":"changelog/#0230-2023-08-28","title":"0.23.0 - 2023-08-28","text":"<p>Compare with 0.22.0</p>"},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Removed <code>BaseCollector</code> and <code>BaseRenderer</code> classes: they were merged into the <code>BaseHandler</code> class.</li> <li>Removed the watch feature, as MkDocs now provides it natively.</li> <li>Removed support for <code>selection</code> and <code>rendering</code> keys in YAML blocks: use <code>options</code> instead.</li> <li>Removed support for loading handlers from the <code>mkdocstrings.handler</code> namespace.   Handlers must now be packaged under the <code>mkdocstrings_handlers</code> namespace.</li> </ul>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Register all anchors for each object in the inventory (228fb73 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Don't add <code>codehilite</code> CSS class to inline code (7690d41 by Timoth\u00e9e Mazzucotelli).</li> <li>Support cross-references for API docs rendered in top-level index page (b194452 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_4","title":"Code Refactoring","text":"<ul> <li>Sort inventories before writing them to disk (9371e9f by Timoth\u00e9e Mazzucotelli).</li> <li>Stop accepting sets as return value of <code>get_anchors</code> (only tuples), to preserve order (2e10374 by Timoth\u00e9e Mazzucotelli).</li> <li>Remove deprecated parts (0a90a47 by Timoth\u00e9e Mazzucotelli).</li> <li>Use proper parameters in <code>Inventory.register</code> method (433c6e0 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0220-2023-05-25","title":"0.22.0 - 2023-05-25","text":"<p>Compare with 0.21.2</p>"},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Allow extensions to add templates (cf0af05 by Timoth\u00e9e Mazzucotelli). PR #569</li> </ul>"},{"location":"changelog/#code-refactoring_5","title":"Code Refactoring","text":"<ul> <li>Report inventory loading errors (2c05d78 by Timoth\u00e9e Mazzucotelli). Co-authored-by: Oleh Prypin oleh@pryp.in</li> </ul>"},{"location":"changelog/#0212-2023-04-06","title":"0.21.2 - 2023-04-06","text":"<p>Compare with 0.21.1</p>"},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Fix regression with LRU cached method (85efbd2 by Timoth\u00e9e Mazzucotelli). Issue #549</li> </ul>"},{"location":"changelog/#0211-2023-04-05","title":"0.21.1 - 2023-04-05","text":"<p>Compare with 0.21.0</p>"},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Fix missing typing-extensions dependency on Python less than 3.10 (bff760b by Timoth\u00e9e Mazzucotelli). Issue #548</li> </ul>"},{"location":"changelog/#0210-2023-04-05","title":"0.21.0 - 2023-04-05","text":"<p>Compare with 0.20.0</p>"},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Expose the full config to handlers (15dacf6 by David Patterson). Issue #501, PR #509</li> </ul>"},{"location":"changelog/#0200-2023-01-19","title":"0.20.0 - 2023-01-19","text":"<p>Compare with 0.19.1</p>"},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Add <code>enabled</code> configuration option (8cf117d by StefanBRas). Issue #478, PR #504</li> </ul>"},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Handle updating Jinja environment of multiple handlers (a6ea80c by David Patterson). Related PR #201, Issue #502, PR #507</li> </ul>"},{"location":"changelog/#code-refactoring_6","title":"Code Refactoring","text":"<ul> <li>Make <code>_load_inventory</code> accept lists as arguments (105ed82 by Sorin Sbarnea). Needed by PR mkdocstrings/python#49, PR #511</li> <li>Remove support for MkDocs &lt; 1.2 (we already depended on MkDocs &gt;= 1.2) (ac963c8 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0191-2022-12-13","title":"0.19.1 - 2022-12-13","text":"<p>Compare with 0.19.0</p>"},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Fix regular expression for Sphinx inventory parsing (348bdd5 by Luis Michaelis). Issue #496, PR #497</li> </ul>"},{"location":"changelog/#code-refactoring_7","title":"Code Refactoring","text":"<ul> <li>Small fixes to type annotations (9214b74 by Oleh Prypin). PR #470</li> <li>Report usage-based warnings as user-facing messages (03dd7a6 by Oleh Prypin). PR #464</li> </ul>"},{"location":"changelog/#0190-2022-05-28","title":"0.19.0 - 2022-05-28","text":"<p>Compare with 0.18.1</p>"},{"location":"changelog/#highlights","title":"Highlights","text":"<p>We decided to deprecate a few things to pave the way towards a more stable code base, bringing us closer to a v1.</p> <ul> <li>Selection and rendering options are now combined into a single   <code>options</code> key. Using the old keys will emit a deprecation warning.</li> <li>The <code>BaseCollector</code> and <code>BaseRenderer</code> classes are deprecated in favor   of <code>BaseHandler</code>, which merges their functionality. Using the old   classes will emit a deprecation warning.</li> </ul> <p>New versions of the Python handler and the legacy Python handler were also released in coordination with mkdocstrings 0.19. See their respective changelogs: python, python-legacy. Most notably, the Python handler gained the <code>members</code> and <code>filters</code> options that prevented many users to switch to it.</p> <p>mkdocstrings stopped depending directly on the legacy Python handler. It means you now have to explicitely depend on it, directly or through the extra provided by mkdocstrings, if you want to continue using it.</p>"},{"location":"changelog/#packaging-dependencies","title":"Packaging / Dependencies","text":"<ul> <li>Stop depending directly on mkdocstrings-python-legacy (9055d58 by Timoth\u00e9e Mazzucotelli). Issue #376</li> </ul>"},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>Pass config file path to handlers (cccebc4 by Timoth\u00e9e Mazzucotelli). Issue #311, PR #425</li> </ul>"},{"location":"changelog/#code-refactoring_8","title":"Code Refactoring","text":"<ul> <li>Support options / deprecated options mix-up (7c71f26 by Timoth\u00e9e Mazzucotelli).</li> <li>Deprecate watch feature in favor of MkDocs' built-in one (c20022e by Timoth\u00e9e Mazzucotelli).</li> <li>Log relative template paths if possible, instead of absolute (91f5f83 by Timoth\u00e9e Mazzucotelli).</li> <li>Deprecate <code>selection</code> and <code>rendering</code> YAML keys (3335310 by Timoth\u00e9e Mazzucotelli). PR #420</li> <li>Deprecate <code>BaseCollector</code> and <code>BaseRenderer</code> (eb822cb by Timoth\u00e9e Mazzucotelli). PR #413</li> </ul>"},{"location":"changelog/#0181-2022-03-01","title":"0.18.1 - 2022-03-01","text":"<p>Compare with 0.18.0</p>"},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Don't preemptively register identifiers as anchors (c7ac043 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0180-2022-02-06","title":"0.18.0 - 2022-02-06","text":"<p>Compare with 0.17.0</p>"},{"location":"changelog/#highlights_1","title":"Highlights","text":"<ul> <li>Python 3.6 support is dropped.</li> <li>We provide a new, experimental Python handler based on Griffe.   This new handler brings automatic cross-references for every annotation in your code,   including references to third-party libraries' APIs if they provide objects inventories   and you explicitely load them in <code>mkdocs.yml</code>.   See migration notes in the documentation.</li> <li>The \"legacy\" Python handler now lives in its own repository at https://github.com/mkdocstrings/python-legacy.</li> </ul>"},{"location":"changelog/#packaging-dependencies_1","title":"Packaging / Dependencies","text":"<ul> <li>Add Crystal extra, update Python extras versions (b8222b0 by Timoth\u00e9e Mazzucotelli). PR #374</li> <li>Update autorefs to actually required version (fc6c7f6 by Timoth\u00e9e Mazzucotelli).</li> <li>Drop Python 3.6 support (7205ac6 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>Allow unwrapping the <code>&lt;p&gt;</code> tag in <code>convert_markdown</code> filter (5351fc8 by Oleh Prypin). PR #369</li> <li>Support handlers spanning multiple locations (f42dfc6 by Timoth\u00e9e Mazzucotelli). PR #355</li> </ul>"},{"location":"changelog/#code-refactoring_9","title":"Code Refactoring","text":"<ul> <li>Prefix logs with the package name only (6c2b734 by Timoth\u00e9e Mazzucotelli). PR #375</li> <li>Extract the Python handler into its own repository (74371e4 by Timoth\u00e9e Mazzucotelli). PR #356</li> <li>Support Jinja2 3.1 (b377227 by Timoth\u00e9e Mazzucotelli). Issue #360, PR #361</li> <li>Find templates in new and deprecated namespaces (d5d5f18 by Timoth\u00e9e Mazzucotelli). PR #367</li> <li>Support loading handlers from the <code>mkdocstrings_handlers</code> namespace (5c22c6c by Timoth\u00e9e Mazzucotelli). PR #367</li> </ul>"},{"location":"changelog/#0170-2021-12-27","title":"0.17.0 - 2021-12-27","text":"<p>Compare with 0.16.2</p>"},{"location":"changelog/#features_9","title":"Features","text":"<ul> <li>Add <code>show_signature</code> rendering option (024ee82 by Will Da Silva). Issue #341, PR #342</li> <li>Support Keyword Args and Yields sections (1286427 by Timoth\u00e9e Mazzucotelli). Issue #205 and #324, PR #331</li> </ul>"},{"location":"changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>Do minimum work when falling back to re-collecting an object to get its anchor (f6cf570 by Timoth\u00e9e Mazzucotelli). Issue #329, PR #330</li> </ul>"},{"location":"changelog/#code-refactoring_10","title":"Code Refactoring","text":"<ul> <li>Return multiple identifiers from fallback method (78c498c by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/autorefs#11, PR #350</li> </ul>"},{"location":"changelog/#0162-2021-10-04","title":"0.16.2 - 2021-10-04","text":"<p>Compare with 0.16.1</p>"},{"location":"changelog/#dependencies_1","title":"Dependencies","text":"<ul> <li>Support <code>pymdown-extensions</code> v9.x (0831343 by Ofek Lev and 38b22ec by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0161-2021-09-23","title":"0.16.1 - 2021-09-23","text":"<p>Compare with 0.16.0</p>"},{"location":"changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>Fix ReadTheDocs \"return\" template (598621b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0160-2021-09-20","title":"0.16.0 - 2021-09-20","text":"<p>Compare with 0.15.0</p>"},{"location":"changelog/#features_10","title":"Features","text":"<ul> <li>Add a rendering option to change the sorting of members (b1fff8b by Joe Rickerby). Issue #114, PR #274</li> <li>Add option to show Python base classes (436f550 by Brian Koropoff). Issue #269, PR #297</li> <li>Support loading external Python inventories in Sphinx format (a8418cb by Oleh Prypin). PR #287</li> <li>Support loading external inventories and linking to them (8b675f4 by Oleh Prypin). PR #277</li> <li>Very basic support for MkDocs theme (974ca90 by Oleh Prypin). PR #272</li> <li>Generate objects inventory (14ed959 and bbd85a9 by Timoth\u00e9e Mazzucotelli). Issue #251, PR #253</li> </ul>"},{"location":"changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>Don't render empty code blocks for missing type annotations (d2e9e1e by Oleh Prypin).</li> <li>Fix custom handler not being used (6dcf342 by Timoth\u00e9e Mazzucotelli). Issue #259, PR #263</li> <li>Don't hide <code>setup_commands</code> errors (92418c4 by Gabriel V\u00eejial\u0103). PR #258</li> </ul>"},{"location":"changelog/#code-refactoring_11","title":"Code Refactoring","text":"<ul> <li>Move writing extra files to an earlier stage in the build (3890ab5 by Oleh Prypin). PR #275</li> </ul>"},{"location":"changelog/#0152-2021-06-09","title":"0.15.2 - 2021-06-09","text":"<p>Compare with 0.15.1</p>"},{"location":"changelog/#packaging","title":"Packaging","text":"<ul> <li>MkDocs default schema needs to be obtained differently now (b3e122b by Oleh Prypin). PR #273</li> <li>Compatibility with MkDocs 1.2: livereload isn't guaranteed now (36e8024 by Oleh Prypin). PR #294</li> </ul>"},{"location":"changelog/#0151-2021-05-16","title":"0.15.1 - 2021-05-16","text":"<p>Compare with 0.15.0</p>"},{"location":"changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>Prevent error during parallel installations (fac2c71 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#packaging_1","title":"Packaging","text":"<ul> <li>Support the upcoming major Jinja and MarkupSafe releases (bb4f9de by Oleh Prypin). PR #283</li> <li>Accept a higher version of mkdocs-autorefs (c8de08e by Oleh Prypin). PR #282</li> </ul>"},{"location":"changelog/#0150-2021-02-28","title":"0.15.0 - 2021-02-28","text":"<p>Compare with 0.14.0</p>"},{"location":"changelog/#breaking-changes_1","title":"Breaking Changes","text":"<p>The following items are possible breaking changes:</p> <ul> <li>Cross-linking to arbitrary headings now requires to opt-in to the autorefs plugin,   which is installed as a dependency of mkdocstrings.   See Cross-references to any Markdown heading.</li> <li>mkdocstrings now respects your configured code highlighting method,   so if you are using the CodeHilite extension, the <code>.highlight</code> CSS class in the rendered HTML will become <code>.codehilite</code>.   So make sure to adapt your extra CSS accordingly. Or just switch to using pymdownx.highlight, it's better supported by mkdocstrings anyway.   See Syntax highlighting.</li> <li>Most of the CSS rules that mkdocstrings used to recommend for manual addition, now become mandatory (auto-injected into the site). This shouldn't break any of your styles, but you are welcome to remove the now-redundant lines that you had copied into <code>extra_css</code>, similarly to this diff.</li> </ul>"},{"location":"changelog/#features_11","title":"Features","text":"<ul> <li>Nicer-looking error outputs - no tracebacks from mkdocstrings (6baf720 by Oleh Prypin). PR #230</li> <li>Let handlers add CSS to the pages, do so for Python handler (05c7a3f by Oleh Prypin). Issue #189, PR #218</li> <li>Allow linking to an object heading not only by its canonical identifier, but also by its possible aliases (4789950 by Oleh Prypin). PR #217</li> </ul>"},{"location":"changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>Propagate the CSS class to inline highlighting as well (c7d80e6 by Oleh Prypin). PR #245</li> <li>Don't double-escape characters in highlighted headings (6357144 by Oleh Prypin). Issue #228, PR #241</li> </ul>"},{"location":"changelog/#code-refactoring_12","title":"Code Refactoring","text":"<ul> <li>Use the autorefs plugin from its new external location (e2d74ef by Oleh Prypin). PR #235</li> <li>Split out Markdown extensions from <code>handlers</code> to <code>handlers.rendering</code> (7533852 by Oleh Prypin). PR #233</li> <li>Theme-agnostic code highlighting, respecting configs (f9ea009 by Oleh Prypin). PR #202</li> <li>Split out autorefs plugin, make it optional (fc67656 by Oleh Prypin). PR #220</li> <li>Remove the extra wrapper div from the final doc (7fe438c by Oleh Prypin). PR #209</li> <li>Don't re-parse the whole subdoc, expose only headings (15f84f9 by Oleh Prypin). PR #209</li> <li>Actually exclude hidden headings from the doc (0fdb082 by Oleh Prypin). PR #209</li> </ul>"},{"location":"changelog/#0140-2021-01-06","title":"0.14.0 - 2021-01-06","text":"<p>Compare with 0.13.6</p> <p>Special thanks to Oleh @oprypin Prypin who did an amazing job (this is a euphemism) at improving mkdocstrings, fixing hard-to-fix bugs with clever solutions, implementing great new features and refactoring the code for better performance and readability! Thanks Oleh!</p>"},{"location":"changelog/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>Fix double code tags (e84d401 by Timoth\u00e9e Mazzucotelli).</li> <li>Don't mutate the original Markdown config for permalinks (8f6b163 by Oleh Prypin).</li> <li>Preserve text immediately before an autodoc (07466fa by Oleh Prypin). PR #207</li> <li>Remove <code>href</code> attributes from headings in templates (d5602ff by Oleh Prypin). PR #204</li> <li>Don't let <code>toc</code> extension append its permalink twice (a154f5c by Oleh Prypin). PR #203</li> <li>Fix undefined entity for <code>&amp;para;</code> (2c29211 by Timoth\u00e9e Mazzucotelli).</li> <li>Make ids of Markdown sub-documents prefixed with the parent item id (d493d33 by Oleh Prypin). Issue #186 and #193, PR #199</li> <li>More lenient regex for data-mkdocstrings-identifier (dcfec8e by Oleh Prypin).</li> <li>Shift Markdown headings according to the current <code>heading_level</code> (13f41ae by Oleh Prypin). Issue #192, PR #195</li> <li>Fix footnotes appearing in all following objects (af24bc2 by Oleh Prypin). Issue #186, PR #195</li> <li>Fix cross-references from the root index page (9c9f2a0 by Oleh Prypin). Issue #184, PR #185</li> <li>Fix incorrect argument name passed to Markdown (10ce502 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix error when a digit immediately follows a code tag (9b92341 by Oleh Prypin). Issue #169, PR #175</li> <li>Detecting paths relative to template directory in logging (a50046b by Oleh Prypin). Issue #166</li> </ul>"},{"location":"changelog/#code-refactoring_13","title":"Code Refactoring","text":"<ul> <li>BlockProcessor already receives strings, use them as such (bcf7da9 by Oleh Prypin).</li> <li>Remove some unused code (8504084 by Oleh Prypin). PR #206</li> <li>Improve XML parsing error handling (ad86410 by Timoth\u00e9e Mazzucotelli).</li> <li>Explicitly use MarkupSafe (6b9ebe7 by Oleh Prypin).</li> <li>Split out the handler cache, expose it through the plugin (6453026 by Oleh Prypin). Issue #179, PR #191</li> <li>Use ChainMap instead of copying dicts (c634d2c by Oleh Prypin). PR #171</li> <li>Rename logging to loggers to avoid confusion (7a119cc by Timoth\u00e9e Mazzucotelli).</li> <li>Simplify logging (409f93e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_12","title":"Features","text":"<ul> <li>Allow specifying <code>heading_level</code> as a Markdown heading (10efc28 by Oleh Prypin). PR #170</li> <li>Allow any characters in identifiers (7ede68a by Oleh Prypin). PR #174</li> <li>Allow namespace packages for handlers (39b0465 by Timoth\u00e9e Mazzucotelli).</li> <li>Add template debugging/logging (33b32c1 by Timoth\u00e9e Mazzucotelli).</li> <li>Add initial support for the ReadTheDocs theme (1028115 by Timoth\u00e9e Mazzucotelli). Issue #107, PR #159</li> <li>Add option to show type annotations in signatures (f94ce9b by Timoth\u00e9e Mazzucotelli). Issue #106</li> </ul>"},{"location":"changelog/#packaging_2","title":"Packaging","text":"<ul> <li>Accept verions of <code>pytkdocs</code> up to 0.10.x (see changelog).</li> </ul>"},{"location":"changelog/#performance-improvements","title":"Performance Improvements","text":"<ul> <li>Call <code>update_env</code> only once per <code>Markdown</code> instance (b198c74 by Oleh Prypin). PR #201</li> <li>Disable Jinja's <code>auto_reload</code> to reduce disk reads (3b28c58 by Oleh Prypin). PR #200</li> <li>Rework autorefs replacement to not re-parse the final HTML (22a9e4b by Oleh Prypin). Issue #187, PR #188</li> </ul>"},{"location":"changelog/#0136-2020-09-28","title":"0.13.6 - 2020-09-28","text":"<p>Compare with 0.13.5</p>"},{"location":"changelog/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>Fix rendering when clicking on hidden toc entries (2af4d31 by Timoth\u00e9e Mazzucotelli). Issue #60.</li> </ul>"},{"location":"changelog/#0135-2020-09-28","title":"0.13.5 - 2020-09-28","text":"<p>Compare with 0.13.4</p>"},{"location":"changelog/#packaging_3","title":"Packaging","text":"<ul> <li>Accept <code>pytkdocs</code> version up to 0.9.x (changelog).</li> </ul>"},{"location":"changelog/#0134-2020-09-25","title":"0.13.4 - 2020-09-25","text":"<p>Compare with 0.13.3</p>"},{"location":"changelog/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>Bring back arbitrary <code>**config</code> to Python handler (fca7d4c by Florimond Manca). Issue #154, PR #155</li> </ul>"},{"location":"changelog/#0133-2020-09-25","title":"0.13.3 - 2020-09-25","text":"<p>Compare with 0.13.2</p>"},{"location":"changelog/#packaging_4","title":"Packaging","text":"<ul> <li>Accept <code>pytkdocs</code> version up to 0.8.x (changelog).</li> </ul>"},{"location":"changelog/#0132-2020-09-08","title":"0.13.2 - 2020-09-08","text":"<p>Compare with 0.13.1</p>"},{"location":"changelog/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>Fix relative URLs when <code>use_directory_urls</code> is false (421d189 by Timoth\u00e9e Mazzucotelli). References: #149</li> </ul>"},{"location":"changelog/#0131-2020-09-03","title":"0.13.1 - 2020-09-03","text":"<p>Compare with 0.13.0</p>"},{"location":"changelog/#bug-fixes_19","title":"Bug Fixes","text":"<ul> <li>Use relative links for cross-references (9c77f1f by Timoth\u00e9e Mazzucotelli). References: #144, #147</li> </ul>"},{"location":"changelog/#0130-2020-08-21","title":"0.13.0 - 2020-08-21","text":"<p>Compare with 0.12.2</p>"},{"location":"changelog/#bug-fixes_20","title":"Bug Fixes","text":"<ul> <li>Accept dashes in module names (fcf79d0 by Timoth\u00e9e Mazzucotelli). References: #140</li> </ul>"},{"location":"changelog/#features_13","title":"Features","text":"<ul> <li>Add option to show full path of direct members only (d1b9401 by Aaron Dunmore). References: #134, #136</li> </ul>"},{"location":"changelog/#packaging_5","title":"Packaging","text":"<ul> <li>Accept <code>pymdown-extensions</code> versions up to 0.8.x (see release notes) (178d48d by Hugo van Kemenade). PR #146</li> </ul>"},{"location":"changelog/#0122-2020-07-24","title":"0.12.2 - 2020-07-24","text":"<p>Compare with 0.12.1</p>"},{"location":"changelog/#packaging_6","title":"Packaging","text":"<ul> <li>Accept <code>pytkdocs</code> version up to 0.7.x (changelog).</li> </ul>"},{"location":"changelog/#0121-2020-07-07","title":"0.12.1 - 2020-07-07","text":"<p>Compare with 0.12.0</p>"},{"location":"changelog/#bug-fixes_21","title":"Bug Fixes","text":"<ul> <li>Fix HTML-escaped sequence parsing as XML (db297f1 by Timoth\u00e9e Mazzucotelli).</li> <li>Allow running mkdocs from non-default interpreter (283dd7b by Jared Khan).</li> </ul>"},{"location":"changelog/#0120-2020-06-14","title":"0.12.0 - 2020-06-14","text":"<p>Compare with 0.11.4</p>"},{"location":"changelog/#features_14","title":"Features","text":"<ul> <li>Support attributes section in Google-style docstrings (8300253 by Timoth\u00e9e Mazzucotelli). References: #88</li> <li>Support examples section in Google-style docstrings (650c754 by Iago Gonz\u00e1lez). References: #112</li> </ul>"},{"location":"changelog/#packaging_7","title":"Packaging","text":"<ul> <li>Accept <code>pytkdocs</code> version up to 0.6.x (changelog).</li> </ul>"},{"location":"changelog/#0114-2020-06-08","title":"0.11.4 - 2020-06-08","text":"<p>Compare with 0.11.3</p>"},{"location":"changelog/#packaging_8","title":"Packaging","text":"<ul> <li>Accept <code>pytkdocs</code> version up to 0.5.x (changelog).   If it breaks your docs, please open issues on <code>pytkdocs</code>' bug-tracker,   or pin <code>pytkdocs</code> version to while waiting for bug fixes &lt;0.5.0 .</li> </ul>"},{"location":"changelog/#0113-2020-06-07","title":"0.11.3 - 2020-06-07","text":"<p>Compare with 0.11.2</p>"},{"location":"changelog/#bug-fixes_22","title":"Bug Fixes","text":"<ul> <li>Support custom theme directory configuration (1243cf6 by Abhishek Thakur). References: #120, #121</li> </ul>"},{"location":"changelog/#0112-2020-05-20","title":"0.11.2 - 2020-05-20","text":"<p>Compare with 0.11.1</p>"},{"location":"changelog/#packaging_9","title":"Packaging","text":"<ul> <li>Increase <code>pytkdocs</code> version range to accept 0.4.0   (changelog).</li> </ul>"},{"location":"changelog/#0111-2020-05-14","title":"0.11.1 - 2020-05-14","text":"<p>Compare with 0.11.0</p>"},{"location":"changelog/#bug-fixes_23","title":"Bug Fixes","text":"<ul> <li>Fix integration with mkdocs logging une bonne fois pour toute (3293cbf by Timoth\u00e9e Mazzucotelli).</li> <li>Discard setup commands stdout (ea44cea by Timoth\u00e9e Mazzucotelli). References: #91</li> <li>Use the proper python executable to start subprocesses (9fe3b39 by Reece Dunham). References: #91, #103</li> </ul>"},{"location":"changelog/#0110-2020-04-23","title":"0.11.0 - 2020-04-23","text":"<p>Compare with 0.10.3</p>"},{"location":"changelog/#bug-fixes_24","title":"Bug Fixes","text":"<ul> <li>Properly raise on errors (respect strict mode) (2097208 by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #86</li> <li>Hook properly to MkDocs logging (b23daed by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #86</li> </ul>"},{"location":"changelog/#features_15","title":"Features","text":"<ul> <li>Add <code>setup_commands</code> option to python handler (599f8e5 by Ross Mechanic). Related issues/PRs: #89, #90</li> <li>Add option to allow overriding templates (7360021 by Mika\u00ebl Capelle). Related issues/PRs: #59, #82</li> </ul>"},{"location":"changelog/#0103-2020-04-10","title":"0.10.3 - 2020-04-10","text":"<p>Compare with 0.10.2</p>"},{"location":"changelog/#bug-fixes_25","title":"Bug Fixes","text":"<ul> <li>Handle <code>site_url</code> not being defined (9fb4a9b by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #77</li> </ul>"},{"location":"changelog/#packaging_10","title":"Packaging","text":"<p>This version increases the accepted range of versions for the <code>pytkdocs</code> dependency to <code>&gt;=0.2.0, &lt;0.4.0</code>. The <code>pytkdocs</code> project just released version 0.3.0 which:</p> <ul> <li>adds support for complex markup in docstrings sections items descriptions</li> <li>adds support for different indentations in docstrings sections (tabulations or less/more than 4 spaces)</li> <li>fixes docstring parsing for arguments whose names start with <code>*</code>, like <code>*args</code> and <code>**kwargs</code></li> </ul>"},{"location":"changelog/#0102-2020-04-07","title":"0.10.2 - 2020-04-07","text":"<p>Compare with 0.10.1</p>"},{"location":"changelog/#packaging_11","title":"Packaging","text":"<p>This version increases the accepted range of versions for the <code>pymdown-extensions</code> dependency, as well as for the <code>mkdocs-material</code> development dependency. Indeed, both these projects recently released major versions 7 and 5 respectively. Users who wish to use these new versions will be able to. See issue #74.</p>"},{"location":"changelog/#0101-2020-04-03","title":"0.10.1 - 2020-04-03","text":"<p>Compare with 0.10.0</p>"},{"location":"changelog/#bug-fixes_26","title":"Bug Fixes","text":"<ul> <li>Fix jinja2 error for jinja2 &lt; 2.11 (387f970 by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #67, #72</li> <li>Fix missing dependency pymdown-extensions (648b99d by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #66</li> <li>Fix heading level of hidden toc entries (475cc62 by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #65</li> <li>Fix rendering signatures containing keyword_only (c6c5add by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #68</li> </ul>"},{"location":"changelog/#0100-2020-03-27","title":"0.10.0 - 2020-03-27","text":"<p>Compare with 0.9.1</p>"},{"location":"changelog/#features_16","title":"Features","text":"<ul> <li>Prepare for new <code>pytkdocs</code> version (336421a).   Add options <code>filters</code> and <code>members</code> to the Python collector to reflect the new <code>pytkdocs</code> options.   See the default configuration of the Python collector.</li> </ul>"},{"location":"changelog/#091-2020-03-21","title":"0.9.1 - 2020-03-21","text":"<p>Compare with 0.9.0</p>"},{"location":"changelog/#bug-fixes_27","title":"Bug fixes","text":"<ul> <li>Fix cross-references when deploying to GitHub pages (36f804b).</li> </ul>"},{"location":"changelog/#090-2020-03-21","title":"0.9.0 - 2020-03-21","text":"<p>Compare with 0.8.0</p> <p>This version is a big refactor. We will just list the new features without pointing to particular commits. The documentation rendering looks slightly different, and should be better than before. No identified breaking changes for end-users.</p>"},{"location":"changelog/#features_17","title":"Features","text":"<ul> <li>Language agnostic: we moved the code responsible for loading Python documentation into a new project,   <code>pytkdocs</code>, and implemented a \"handlers\" logic, effectively allowing to   support any given language. Waiting for your handlers contributions !</li> <li>Multiple themes support: handlers can offer templates for multiple <code>mkdocs</code> themes.</li> <li>Better cross-references: cross-references now not only work between documented objects (between all languages,   given the objects' identifiers are unique), but also for every heading of your Markdown pages.</li> <li>Configuration options: the rendering of Python documentation can now be configured,   (globally and locally thanks to the handlers system),   check the docs!   Also see the recommended CSS.</li> <li>Proper logging messages: <code>mkdocstrings</code> now logs debug, warning and error messages, useful when troubleshooting.</li> </ul>"},{"location":"changelog/#bug-fixes_28","title":"Bug fixes","text":"<ul> <li>Various fixes and better error handling.</li> </ul>"},{"location":"changelog/#080-2020-03-04","title":"0.8.0 - 2020-03-04","text":"<p>Compare with 0.7.2</p>"},{"location":"changelog/#breaking-changes_2","title":"Breaking Changes","text":"<ul> <li>Be compatible with Mkdocs &gt;= 1.1 (5a974a4).   This is a breaking change as we're not compatible with versions of Mkdocs below 1.1 anymore.   If you cannot upgrade Mkdocs to 1.1, pin mkdocstrings' version to 0.7.2.</li> </ul>"},{"location":"changelog/#072-2020-03-04","title":"0.7.2 - 2020-03-04","text":"<p>Compare with 0.7.1</p>"},{"location":"changelog/#bug-fixes_29","title":"Bug Fixes","text":"<ul> <li>Catch <code>OSError</code> when trying to get source lines (8e8d604).</li> <li>Do not render signature empty sentinel (16dfd73).</li> <li>Fix for nested classes and their attributes (7fef903).</li> <li>Fix <code>relative_file_path</code> method (52715ad).</li> <li>Wrap file path in backticks to escape it (2525f39).</li> </ul>"},{"location":"changelog/#071-2020-02-18","title":"0.7.1 - 2020-02-18","text":"<p>Compare with 0.7.0</p>"},{"location":"changelog/#bug-fixes_30","title":"Bug Fixes","text":"<ul> <li>Replace literal slash with os.sep for Windows compatibility (70f9af5).</li> </ul>"},{"location":"changelog/#070-2020-01-13","title":"0.7.0 - 2020-01-13","text":"<p>Compare with 0.6.1</p>"},{"location":"changelog/#bug-fixes_31","title":"Bug Fixes","text":"<ul> <li>Don't mark args or kwargs as required (4049d6f).</li> <li>Filter submodules (7b11095).</li> </ul>"},{"location":"changelog/#code-refactoring_14","title":"Code Refactoring","text":"<ul> <li>Don't guess lang in generated docs (db4f60a).</li> <li>Render at HTML step with custom markdown converter (9b5a3e1).</li> </ul>"},{"location":"changelog/#features_18","title":"Features","text":"<ul> <li>Change forward ref to ref, fix optional unions (2f0bfaa).</li> <li>Discover package submodules (231062a).</li> <li>Implement watched source code (hacks) (4a67953).</li> </ul>"},{"location":"changelog/#061-2020-01-02","title":"0.6.1 - 2020-01-02","text":"<p>Compare with 0.6.0</p>"},{"location":"changelog/#bug-fixes_32","title":"Bug Fixes","text":"<ul> <li>Break docstring discarding loop if found (5a17fec).</li> <li>Fix discarding docstring (143f7cb).</li> <li>Fix getting annotation from nodes (ecde72b).</li> <li>Fix various things (affbf06).</li> </ul>"},{"location":"changelog/#code-refactoring_15","title":"Code Refactoring","text":"<ul> <li>Break as soon as we find the same attr in a parent class while trying to discard the docstring (65d7908).</li> <li>Split Docstring.parse method to improve readability (2226e2d).</li> </ul>"},{"location":"changelog/#060-2019-12-28","title":"0.6.0 - 2019-12-28","text":"<p>Compare with 0.5.0</p>"},{"location":"changelog/#bug-fixes_33","title":"Bug Fixes","text":"<ul> <li>Fix GenericMeta import error on Python 3.7+ (febf2b9).</li> </ul>"},{"location":"changelog/#code-refactoring_16","title":"Code Refactoring","text":"<ul> <li>More classes. Still ugly code though :'( (f41c119).</li> <li>Split into more modules (f1872a4).</li> <li>Use Object subclasses (40dd106).</li> </ul>"},{"location":"changelog/#050-2019-12-22","title":"0.5.0 - 2019-12-22","text":"<p>Compare with 0.4.0</p>"},{"location":"changelog/#features_19","title":"Features","text":"<ul> <li>Use divs in HTML contents to ease styling (2a36a0e).</li> </ul>"},{"location":"changelog/#040-2019-12-22","title":"0.4.0 - 2019-12-22","text":"<p>Compare with 0.3.0</p>"},{"location":"changelog/#features_20","title":"Features","text":"<ul> <li>Parse docstrings Google-style blocks, get types from signature (5af0c7b).</li> </ul>"},{"location":"changelog/#030-2019-12-21","title":"0.3.0 - 2019-12-21","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#features_21","title":"Features","text":"<ul> <li>Allow object referencing in docstrings (2dd50c0).</li> </ul>"},{"location":"changelog/#020-2019-12-15","title":"0.2.0 - 2019-12-15","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#misc","title":"Misc","text":"<ul> <li>Refactor, features, etc. (111fa85).</li> </ul>"},{"location":"changelog/#010-2019-12-12","title":"0.1.0 - 2019-12-12","text":"<p>Compare with first commit</p>"},{"location":"changelog/#misc_1","title":"Misc","text":"<ul> <li>Clean up (delete unused files) (c227043).</li> <li>Clean up unused makefile rules (edc01e9).</li> <li>Initial commit (f1dd8fb).</li> <li>Update readme (ae56bdd).</li> <li>Add plugin (6ed5cb1).</li> <li>First PoC, needs better theming (18a00b9).</li> <li>Get attributes docstrings (7838fff).</li> <li>Refactor (f68f1a8).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at dev@pawamoy.fr. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd mkdocstrings\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>python3 -m pip install --user pipx\npipx install uv\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv install</code>.</p> <p>You now have the dependencies installed.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>The entry-point to run commands and tasks is the <code>make</code> Python script, located in the <code>scripts</code> directory. Try running <code>make</code> to show the available commands and tasks. The commands do not need the Python dependencies to be installed, while the tasks do. The cross-platform tasks are written in Python, thanks to duty.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during the review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build mkdocstrings. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License click Composable command line interface toolkit <code>&gt;=8.0.0, &gt;=7.0</code> <code>8.1.7</code> BSD-3-Clause colorama Cross-platform colored terminal text. <code>~=0.4</code> <code>0.4.6</code> BSD License ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.49</code> <code>1.2.0.1.2.0</code> ISC importlib_metadata Read metadata from Python packages <code>&gt;=4.6</code> <code>8.4.0</code> Apache Software License Jinja2 A very fast and expressive template engine. <code>&gt;=2.11.1, &gt;=2.10</code> <code>3.1.4</code> BSD License Markdown Python implementation of John Gruber's Markdown. <code>~=3.2, &gt;=3.6</code> <code>3.7</code> BSD License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0, &gt;=1.1</code> <code>2.1.5</code> BSD-3-Clause mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3, &gt;=1.3.4</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6, &gt;=1.4</code> <code>1.6.1</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.2</code> <code>1.2.0</code> ISC mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.11.1.1.9.0</code> ISC packaging Core utilities for Python packages <code>&gt;=24.0, &gt;=20.5</code> <code>24.1</code> Apache Software License + BSD License pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0, &gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2, &gt;=2</code> <code>4.2.2</code> MIT pymdown-extensions Extension pack for Python Markdown. <code>~=10.2, &gt;=6.3</code> <code>10.9</code> MIT python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License PyYAML YAML parser and emitter for Python <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License six Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.6.0, &gt;=4.1</code> <code>4.12.2</code> Python Software Foundation License watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>5.0.1</code> Apache-2.0 zipp Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.20.1</code> MIT License"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT babel Internationalization utilities <code>~=2.10</code> <code>2.16.0</code> BSD-3-Clause backports.tarfile Backport of CPython tarfile module <code>1.2.0</code> MIT License black The uncompromising code formatter. <code>&gt;=24.4</code> <code>24.8.0</code> MIT build A simple, correct Python build frontend <code>&gt;=1.2</code> <code>1.2.1</code> MIT License certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2024.8.30</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.12</code> <code>1.17.0</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.3.2</code> MIT click Composable command line interface toolkit <code>&gt;=8.0.0, &gt;=7.0</code> <code>8.1.7</code> BSD-3-Clause colorama Cross-platform colored terminal text. <code>~=0.4</code> <code>0.4.6</code> BSD License coverage Code coverage measurement for Python <code>&gt;=5.2.1</code> <code>7.6.1</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>43.0.0</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.21.2</code> Public Domain + Python Software Foundation License + BSD License + GNU General Public License (GPL) duty A simple task runner. <code>&gt;=1.4</code> <code>1.4.1</code> ISC editables Editable installations <code>&gt;=0.5</code> <code>0.5</code> MIT License execnet execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=0.11, !=1.0.0</code> <code>1.0.2</code> ISC ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.5</code> <code>2.5.2</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.11</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>3.1.43</code> BSD-3-Clause htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.8</code> BSD License importlib_metadata Read metadata from Python packages <code>&gt;=4.6</code> <code>8.4.0</code> Apache Software License iniconfig brain-dead simple config-ini parsing <code>2.0.0</code> MIT jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.0.2</code> MIT License jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.8.0</code> MIT License Jinja2 A very fast and expressive template engine. <code>&gt;=2.11.1, &gt;=2.10</code> <code>3.1.4</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.3.0</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>~=3.2, &gt;=3.6</code> <code>3.7</code> BSD License markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1.8</code> <code>1.9.3.1.1.0</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0, &gt;=1.1</code> <code>2.1.5</code> BSD-3-Clause mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3, &gt;=1.3.4</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6, &gt;=1.4</code> <code>1.6.1</code> BSD-2-Clause mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC mkdocs-gen-files MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.5</code> <code>0.5.0</code> MIT mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocs-git-committers-plugin-2 An MkDocs plugin to create a list of contributors on the page. The git-committers plugin will seed the template context with a list of GitHub or GitLab committers and other useful GIT info such as last modified date <code>&gt;=2.3</code> <code>2.3.0</code> MIT mkdocs-literate-nav MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.6</code> <code>0.6.1</code> MIT mkdocs-material Documentation that simply works <code>&gt;=9.5</code> <code>9.5.34+insiders.4.53.12</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocs-redirects A MkDocs plugin for dynamic page redirects to prevent broken links. <code>&gt;=1.2.1</code> <code>1.2.1</code> MIT more-itertools More routines for operating on iterables, beyond itertools <code>10.4.0</code> MIT License mypy Optional static typing for Python <code>&gt;=1.10</code> <code>1.11.2</code> MIT mypy-extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=1.0.0</code> <code>1.0.0</code> MIT License nh3 Python bindings to the ammonia HTML sanitization library. <code>&gt;=0.2.14</code> <code>0.2.18</code> MIT packaging Core utilities for Python packages <code>&gt;=24.0, &gt;=20.5</code> <code>24.1</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0, &gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) pkginfo Query metadata from sdists / bdists / installed packages. <code>&gt;=1.8.1</code> <code>1.10.0</code> MIT platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2, &gt;=2</code> <code>4.2.2</code> MIT pluggy plugin and hook calling mechanisms for python <code>&gt;=1.5, &lt;2</code> <code>1.5.0</code> MIT ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.22</code> BSD-3-Clause Pygments Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.18.0</code> BSD-2-Clause pymdown-extensions Extension pack for Python Markdown. <code>~=10.2, &gt;=6.3</code> <code>10.9</code> MIT pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.1.0</code> MIT License pytest pytest: simple powerful testing with Python <code>&gt;=8.2</code> <code>8.3.2</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=5.0</code> <code>5.0.0</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.15.0</code> MIT pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.6</code> <code>3.6.1</code> MIT License python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License PyYAML YAML parser and emitter for Python <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 regex Alternative regular expression module, to replace re. <code>&gt;=2022.4</code> <code>2024.7.24</code> Apache Software License requests Python HTTP for Humans. <code>~=2.26</code> <code>2.32.3</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>13.8.0</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.4</code> <code>0.6.3</code> MIT SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.2</code> BSD six Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.1</code> BSD twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.0</code> <code>5.1.1</code> Apache Software License types-Markdown Typing stubs for Markdown <code>&gt;=3.6</code> <code>3.7.0.20240822</code> Apache-2.0 types-PyYAML Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20240808</code> Apache-2.0 typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.6.0, &gt;=4.1</code> <code>4.12.2</code> Python Software Foundation License urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.21.1, &lt;3</code> <code>2.2.2</code> MIT License watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>5.0.1</code> Apache-2.0 zipp Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.20.1</code> MIT License <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2019, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"recipes/","title":"Recipes","text":"<p>On this page you will find various recipes, tips and tricks for mkdocstrings and more generally Markdown documentation.</p>"},{"location":"recipes/#automatic-code-reference-pages","title":"Automatic code reference pages","text":"<p>mkdocstrings allows to inject documentation for any object into Markdown pages. But as the project grows, it quickly becomes quite tedious to keep the autodoc instructions, or even the dedicated Markdown files in sync with all your source files and objects.</p> <p>In this recipe, we will iteratively automate the process of generating these pages at each build of the documentation.</p> <p>Let say you have a project called <code>project</code>. This project has a lot of source files, or modules, which live in the <code>src</code> folder:</p> <pre><code>\ud83d\udcc1 repo/\n\u2514\u2500\u2500 \ud83d\udcc1 src/\n    \u2514\u2500\u2500 \ud83d\udcc1 project/\n        \u251c\u2500\u2500  lorem\n        \u251c\u2500\u2500  ipsum\n        \u251c\u2500\u2500  dolor\n        \u251c\u2500\u2500  sit\n        \u2514\u2500\u2500  amet\n</code></pre> <p>Without an automatic process, you will have to manually create a Markdown page for each one of these modules, with the corresponding autodoc instruction, for example <code>::: project.lorem</code>, and also add entry in MkDocs' navigation option (<code>nav</code> in <code>mkdocs.yml</code>). With a lot of modules, this is quickly getting cumbersome.</p> <p>Lets fix that.</p>"},{"location":"recipes/#generate-pages-on-the-fly","title":"Generate pages on-the-fly","text":"<p>In this recipe, we suggest to use the mkdocs-gen-files plugin. This plugin exposes utilities to generate files at build time. These files won't be written to the docs directory: you don't have to track and version them. They are transparently generated each time you build your docs. This is perfect for our use-case!</p> <p>Add <code>mkdocs-gen-files</code> to your project's docs dependencies, and configure it like so:</p> mkdocs.yml<pre><code>plugins:\n- search  # (1)!\n- gen-files:\n    scripts:\n    - scripts/gen_ref_pages.py  # (2)!\n- mkdocstrings\n</code></pre> <ol> <li>Don't forget to load the <code>search</code> plugin when redefining the <code>plugins</code> item.</li> <li>The magic happens here, see below how it works.</li> </ol> <p>mkdocs-gen-files is able to run Python scripts at build time. The Python script that we will execute lives in a scripts folder, and is named <code>gen_ref_pages.py</code>, like \"generate code reference pages\".</p> <pre><code>\ud83d\udcc1 repo/\n\u251c\u2500\u2500 \ud83d\udcc1 docs/\n\u2502   \u2514\u2500\u2500  index.md\n\u251c\u2500\u2500 \ud83d\udcc1 scripts/\n\u2502   \u2514\u2500\u2500  gen_ref_pages.py\n\u251c\u2500\u2500 \ud83d\udcc1 src/\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 project/\n\u2514\u2500\u2500  mkdocs.yml\n</code></pre> scripts/gen_ref_pages.py<pre><code>\"\"\"Generate the code reference pages.\"\"\"\n\nfrom pathlib import Path\n\nimport mkdocs_gen_files\n\nroot = Path(__file__).parent.parent\nsrc = root / \"src\"  # (1)!\n\nfor path in sorted(src.rglob(\"*.py\")):  # (2)!\n    module_path = path.relative_to(src).with_suffix(\"\")  # (3)!\n    doc_path = path.relative_to(src).with_suffix(\".md\")  # (4)!\n    full_doc_path = Path(\"reference\", doc_path)  # (5)!\n\n    parts = tuple(module_path.parts)\n\n    if parts[-1] == \"__init__\":  # (6)!\n        parts = parts[:-1]\n    elif parts[-1] == \"__main__\":\n        continue\n\n    with mkdocs_gen_files.open(full_doc_path, \"w\") as fd:  # (7)!\n        identifier = \".\".join(parts)  # (8)!\n        print(\"::: \" + identifier, file=fd)  # (9)!\n\n    mkdocs_gen_files.set_edit_path(full_doc_path, path.relative_to(root))  # (10)!\n</code></pre> <ol> <li>It's important to build a path relative to the script itself,    to make it possible to build the docs with MkDocs'    <code>-f</code> option.</li> <li>Here we recursively list all <code>.py</code> files, but you can adapt the code to list    files with other extensions of course, supporting other languages than Python.</li> <li>The module path will look like <code>project/lorem</code>.    It will be used to build the mkdocstrings autodoc identifier.</li> <li>This is the partial path of the Markdown page for the module.</li> <li>This is the full path of the Markdown page within the docs.    Here we put all reference pages into a <code>reference</code> folder.</li> <li>This part is only relevant for Python modules. We skip <code>__main__</code> modules and    remove <code>__init__</code> from the module parts as it's implicit during imports.</li> <li>Magic! Add the file to MkDocs pages, without actually writing it in the docs folder.</li> <li>Build the autodoc identifier. Here we document Python modules, so the identifier    is a dot-separated path, like <code>project.lorem</code>.</li> <li>Actually write to the magic file.</li> <li>We can even set the <code>edit_uri</code> on the pages.</li> </ol> <p>Note</p> <p> It is important to look out for correct edit page behaviour when using generated pages. For example, if we have <code>edit_uri</code> set to <code>blob/master/docs/</code> and the following file structure:</p> <pre><code>\ud83d\udcc1 repo/\n\u251c\u2500\u2500  mkdocs.yml\n\u251c\u2500\u2500 \ud83d\udcc1 docs/\n\u2502   \u2514\u2500\u2500  index.md\n\u251c\u2500\u2500 \ud83d\udcc1 scripts/\n\u2502   \u2514\u2500\u2500  gen_ref_pages.py\n\u2514\u2500\u2500 \ud83d\udcc1 src/\n    \u2514\u2500\u2500 \ud83d\udcc1 project/\n        \u251c\u2500\u2500  lorem.py\n        \u251c\u2500\u2500  ipsum.py\n        \u251c\u2500\u2500  dolor.py\n        \u251c\u2500\u2500  sit.py\n        \u2514\u2500\u2500  amet.py\n</code></pre> <p>Then we will have to change our <code>set_edit_path</code> call to:</p> <pre><code>mkdocs_gen_files.set_edit_path(full_doc_path, Path(\"../\") / path)  # (1)!\n</code></pre> <ol> <li>Path can be used to traverse the structure in any way you may need, but    remember to use relative paths!</li> </ol> <p>...so that it correctly sets the edit path of (for example) <code>lorem.py</code> to <code>&lt;repo_url&gt;/blob/master/src/project/lorem.py</code> instead of <code>&lt;repo_url&gt;/blob/master/docs/src/project/lorem.py</code>.</p> <p>With this script, a <code>reference</code> folder is automatically created each time we build our docs. This folder contains a Markdown page for each of our source modules, and each of these pages contains a single line of the form <code>::: project.module</code> (module being <code>lorem</code>, <code>ipsum</code>, etc.). Great! But, we still have to actually add those pages into our MkDocs navigation:</p> mkdocs.yml<pre><code>nav:\n# rest of the navigation...\n- Code Reference:\n  - project:\n    - lorem: reference/project/lorem.md\n    - ipsum: reference/project/ipsum.md\n    - dolor: reference/project/dolor.md\n    - sit: reference/project/sit.md\n    - amet: reference/project/amet.md\n# rest of the navigation...\n</code></pre> <p>Err... so this process is only semi-automatic? Yes, but don't worry, we can fully automate it.</p>"},{"location":"recipes/#generate-a-literate-navigation-file","title":"Generate a literate navigation file","text":"<p>mkdocs-gen-files is able to generate a literate navigation file. But to make use of it, we will need an additional plugin: mkdocs-literate-nav. This plugin allows to specify the whole navigation, or parts of it, into Markdown pages, as plain Markdown lists. We use it here to specify the navigation for the code reference pages.</p> <p>First, add <code>mkdocs-literate-nav</code> to your project's docs dependencies, and configure the plugin in your MkDocs configuration:</p> mkdocs.yml<pre><code>plugins:\n- search\n- gen-files:\n    scripts:\n    - scripts/gen_ref_pages.py\n- literate-nav:\n    nav_file: SUMMARY.md\n- mkdocstrings\n</code></pre> <p>Then, the previous script is updated like so:</p> scripts/gen_ref_pages.py<pre><code>\"\"\"Generate the code reference pages and navigation.\"\"\"\n\nfrom pathlib import Path\n\nimport mkdocs_gen_files\n\nnav = mkdocs_gen_files.Nav()\n\nroot = Path(__file__).parent.parent\nsrc = root / \"src\"\n\nfor path in sorted(src.rglob(\"*.py\")):\n    module_path = path.relative_to(src).with_suffix(\"\")\n    doc_path = path.relative_to(src).with_suffix(\".md\")\n    full_doc_path = Path(\"reference\", doc_path)\n\n    parts = tuple(module_path.parts)\n\n    if parts[-1] == \"__init__\":\n        parts = parts[:-1]\n    elif parts[-1] == \"__main__\":\n        continue\n\n    nav[parts] = doc_path.as_posix()  # (1)!\n\n    with mkdocs_gen_files.open(full_doc_path, \"w\") as fd:\n        ident = \".\".join(parts)\n        fd.write(f\"::: {ident}\")\n\n    mkdocs_gen_files.set_edit_path(full_doc_path, path.relative_to(root))\n\nwith mkdocs_gen_files.open(\"reference/SUMMARY.md\", \"w\") as nav_file:  # (2)!\n    nav_file.writelines(nav.build_literate_nav())  # (3)!\n</code></pre> <ol> <li>Progressively build the navigation object.</li> <li>At the end, create a magic, literate navigation file called <code>SUMMARY.md</code> in the <code>reference</code> folder.</li> <li>Write the navigation as a Markdown list in the literate navigation file.</li> </ol> <p>Now we are able to remove our hard-coded navigation in <code>mkdocs.yml</code>, and replace it with a single line!</p> mkdocs.yml<pre><code>nav:\n# rest of the navigation...\n# defer to gen-files + literate-nav\n- Code Reference: reference/  # (1)!\n# rest of the navigation...\n</code></pre> <ol> <li>Note the trailing slash! It is needed so that <code>mkdocs-literate-nav</code> knows    it has to look for a <code>SUMMARY.md</code> file in that folder.</li> </ol> <p>At this point, we should be able to see the tree of our modules in the navigation.</p>"},{"location":"recipes/#bind-pages-to-sections-themselves","title":"Bind pages to sections themselves","text":"<p>There's a last improvement we can do. With the current script, sections, corresponding to folders, will expand or collapse when you click on them, revealing <code>__init__</code> modules under them (or equivalent modules in other languages, if relevant). Since we are documenting a public API, and given users never explicitly import <code>__init__</code> modules, it would be nice if we could get rid of them and instead render their documentation inside the section itself.</p> <p>Well, this is possible thanks to a third plugin: mkdocs-section-index.</p> <p>Update the script like this:</p> scripts/gen_ref_pages.py<pre><code>\"\"\"Generate the code reference pages and navigation.\"\"\"\n\nfrom pathlib import Path\n\nimport mkdocs_gen_files\n\nnav = mkdocs_gen_files.Nav()\n\nroot = Path(__file__).parent.parent\nsrc = root / \"src\"\n\nfor path in sorted(src.rglob(\"*.py\")):\n    module_path = path.relative_to(src).with_suffix(\"\")\n    doc_path = path.relative_to(src).with_suffix(\".md\")\n    full_doc_path = Path(\"reference\", doc_path)\n\n    parts = tuple(module_path.parts)\n\n    if parts[-1] == \"__init__\":\n        parts = parts[:-1]\n        doc_path = doc_path.with_name(\"index.md\")\n        full_doc_path = full_doc_path.with_name(\"index.md\")\n    elif parts[-1] == \"__main__\":\n        continue\n\n    nav[parts] = doc_path.as_posix()\n\n    with mkdocs_gen_files.open(full_doc_path, \"w\") as fd:\n        ident = \".\".join(parts)\n        fd.write(f\"::: {ident}\")\n\n    mkdocs_gen_files.set_edit_path(full_doc_path, path.relative_to(root))\n\nwith mkdocs_gen_files.open(\"reference/SUMMARY.md\", \"w\") as nav_file:\n    nav_file.writelines(nav.build_literate_nav())\n</code></pre> <p>And update your MkDocs configuration to list the plugin:</p> mkdocs.yml<pre><code>plugins:\n- search\n- gen-files:\n    scripts:\n    - scripts/gen_ref_pages.py\n- literate-nav:\n    nav_file: SUMMARY.md\n- section-index\n- mkdocstrings\n</code></pre> <p>With this, <code>__init__</code> modules will be documented and bound to the sections themselves, better reflecting our public API.</p>"},{"location":"recipes/#prevent-selection-of-prompts-and-output-in-python-code-blocks","title":"Prevent selection of prompts and output in Python code blocks","text":"<p>To prevent the selection of <code>&gt;&gt;&gt;</code>, <code>...</code> and output in Python \"Console\" code blocks, you can use the <code>pycon</code> syntax highlighting on your code blocks, and add global CSS rules to your site using MkDocs <code>extra_css</code> option:</p> <pre><code>```pycon\n&gt;&gt;&gt; for word in (\"Hello\", \"mkdocstrings!\"):\n...     print(word, end=\" \")\n...\nHello mkdocstrings!\n```\n</code></pre> docs/css/code_select.css<pre><code>.highlight .gp, .highlight .go { /* Generic.Prompt, Generic.Output */\n    user-select: none;\n}\n</code></pre> mkdocs.yml<pre><code>extra_css:\n- css/code_select.css\n</code></pre> <p>Warning</p> <p> The <code>.highlight .gp, .highlight .go</code> CSS selector can have unintended side-effects. To target <code>pycon</code> code blocks more specifically, you can configure the <code>pymdownx.highlight</code> extension to use Pygments and set language classes on code blocks:</p> mkdocs.yml<pre><code>markdown_extensions:\n- pymdownx.highlight:\n    use_pygments: true\n    pygments_lang_class: true\n</code></pre> <p>Then you can update the CSS selector like this:</p> docs/css/code_select.css<pre><code>.language-pycon .gp, .language-pycon .go { /* Generic.Prompt, Generic.Output */\n    user-select: none;\n}\n</code></pre> <p>If you don't want to enable this globally, you can still use <code>style</code> tags in the relevant pages, with more accurate CSS selectors:</p> <pre><code>&lt;style&gt;\n#my-div .highlight .gp, #my-div .highlight .go { /* Generic.Prompt, Generic.Output */\n    user-select: none;\n}\n&lt;/style&gt;\n</code></pre> <p>Try to select the following code block's text:</p> <pre><code>&gt;&gt;&gt; for word in (\"Hello\", \"mkdocstrings!\"):\n...     print(word, end=\" \")\nHello mkdocstrings!\n</code></pre>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#code-blocks-in-admonitions-in-docstrings-or-else-are-not-rendered-correctly","title":"Code blocks in admonitions (in docstrings or else) are not rendered correctly","text":"<p>To render code blocks in admonitions, you need to add the <code>pymdownx.superfences</code> extensions to the list of Markdown extensions in <code>mkdocs.yml</code>. For example:</p> <pre><code>!!! note\n    Some text.\n\n    ```bash\n    echo \"some code\"\n    ```\n</code></pre> mkdocs.yml<pre><code>markdown_extensions:\n- admonition\n- codehilite\n- pymdownx.superfences\n</code></pre> <p>For code blocks in docstrings, make sure to escape newlines (<code>\\n</code> -&gt; <code>\\\\n</code>), or prefix the entire docstring with 'r' to make it a raw-docstring: <code>r\"\"\"</code>. Indeed, docstrings are still strings and therefore subject to how Python parses strings.</p>"},{"location":"troubleshooting/#footnotes-are-duplicated-or-overridden","title":"Footnotes are duplicated or overridden","text":"<p>Before version 0.14, footnotes could be duplicated over a page. Please upgrade to version 0.14 or higher.</p> <p>See also:</p> <ul> <li>Issue #186</li> <li>Tabs in docstrings (from <code>pymdownx.tabbed</code>) are not working properly.</li> </ul>"},{"location":"troubleshooting/#mkdocs-warns-me-about-links-to-unfound-documentation-files","title":"MkDocs warns me about links to unfound documentation files","text":"<p>A warning like this one:</p> <p>WARNING -  Documentation file 'reference/parsers/docstrings.md'   contains a link to 'reference/parsers/pytkdocs.parsers.docstrings.Section'   which is not found in the documentation files.</p> <p>...generally means you used parentheses <code>()</code> instead of brackets <code>[]</code> for a cross-reference. Notice the dots in <code>reference/parsers/pytkdocs.parsers.docstrings.Section</code>? It shows that it's probably a cross-reference, not a direct link. It's probably written like <code>[Section](pytkdocs.parsers.docstrings.Section)</code> in the docs, when it should be <code>[Section][pytkdocs.parsers.docstrings.Section]</code>.</p>"},{"location":"troubleshooting/#some-objects-are-not-rendered-they-do-not-appear-in-the-generated-docs","title":"Some objects are not rendered (they do not appear in the generated docs)","text":"<ul> <li>Make sure the configuration options of the handler are correct.   Check the documentation for Handlers to see the available options for each handler.</li> <li>Also make sure your documentation in your source code is formatted correctly.   For Python code, check the supported docstring styles page.</li> <li>Re-run the Mkdocs command with <code>-v</code>, and carefully read any traceback.</li> </ul>"},{"location":"troubleshooting/#tabs-in-docstrings-from-pymdownxtabbed-are-not-working-properly","title":"Tabs in docstrings (from <code>pymdownx.tabbed</code>) are not working properly","text":"<p>Before version 0.14, multiple tab blocks injected on the same page would result in broken links: clicking on a tab would bring the user to the wrong one. Please upgrade to version 0.14 or higher.</p> <p>See also:</p> <ul> <li>Issue #193</li> <li>Footnotes are duplicated or overridden.</li> </ul> <p>If you are stuck on a version before 0.14, and want to use multiple tab blocks in one page, use this workaround.</p> JavaScript workaround <p>Put the following code in a .js file, and list it in MkDocs' <code>extra_javascript</code>:</p> <pre><code>// Credits to Nikolaos Zioulis (@zuru on GitHub)\nfunction setID(){\n    var tabs = document.getElementsByClassName(\"tabbed-set\");\n    for (var i = 0; i &lt; tabs.length; i++) {\n        children = tabs[i].children;\n        var counter = 0;\n        var iscontent = 0;\n        for(var j = 0; j &lt; children.length;j++){\n            if(typeof children[j].htmlFor === 'undefined'){\n                if((iscontent + 1) % 2 == 0){\n                    // check if it is content\n                    if(iscontent == 1){\n                        btn = children[j].childNodes[1].getElementsByTagName(\"button\");\n                    }\n                }\n                else{\n                    // if not change the id\n                    children[j].id = \"__tabbed_\" + String(i + 1) + \"_\" + String(counter + 1);\n                    children[j].name = \"__tabbed_\" + String(i + 1);\n                    // make default tab open\n                    if(j == 0)\n                        children[j].click();\n                }\n                iscontent++;\n            }\n            else{\n                // link to the correct tab\n                children[j].htmlFor = \"__tabbed_\" + String(i+1) + \"_\" + String(counter + 1);\n                counter ++;\n            }\n        }\n    }\n}\nsetID();\n</code></pre> <p>This code will correctly reset the IDs for tabs on a same page.</p>"},{"location":"troubleshooting/#the-generated-documentation-does-not-look-good","title":"The generated documentation does not look good","text":"<p>Please open an ticket on the bugtracker with a detailed explanation and screenshots of the bad-looking parts. Note that you can always customize the look of mkdocstrings blocks -- through both HTML and CSS.</p>"},{"location":"troubleshooting/#warning-could-not-find-cross-reference-target","title":"Warning: could not find cross-reference target","text":"<p>New in version 0.15</p> <p>Cross-linking used to include any Markdown heading, but now it's only for mkdocstrings identifiers by default. See Cross-references to any Markdown heading to opt back in.</p> <p>Make sure the referenced object is properly rendered: verify your configuration options.</p> <p>For false-positives, you can wrap the text in backticks (`) to prevent <code>mkdocstrings</code> from trying to process it.</p>"},{"location":"troubleshooting/#python-specifics","title":"Python specifics","text":""},{"location":"troubleshooting/#nothing-is-rendered-at-all","title":"Nothing is rendered at all","text":"<p>Is your package available in the Python path?</p> <p>See Python handler: Finding modules.</p>"},{"location":"troubleshooting/#latex-in-docstrings-is-not-rendered-correctly","title":"LaTeX in docstrings is not rendered correctly","text":"<p>If you are using a Markdown extension like Arithmatex Mathjax or <code>markdown-katex</code> to render LaTeX, add <code>r</code> in front of your docstring to make sure nothing is escaped. You'll still maybe have to play with escaping to get things right.</p> <p>Example:</p> <pre><code>def math_function(x, y):\n    r\"\"\"\n    Look at these formulas:\n\n    ```math\n    f(x) = \\int_{-\\infty}^\\infty\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi\n    ```\n    \"\"\"\n</code></pre>"},{"location":"troubleshooting/#my-docstrings-in-comments-are-not-picked-up","title":"My docstrings in comments (<code>#:</code>) are not picked up","text":"<p>It's because we do not support type annotations in comments.</p> <p>So instead of:</p> <pre><code>import enum\n\n\nclass MyEnum(enum.Enum):\n    v1 = 1  #: The first choice.\n    v2 = 2  #: The second choice.\n</code></pre> <p>You can use:</p> <pre><code>import enum\n\n\nclass MyEnum(enum.Enum):\n    \"\"\"My enum.\n\n    Attributes:\n        v1: The first choice.\n        v2: The second choice.\n    \"\"\"\n\n    v1 = 1\n    v2 = 2\n</code></pre> <p>Or:</p> <pre><code>import enum\n\n\nclass MyEnum(enum.Enum):\n    v1 = 1\n    \"\"\"The first choice.\"\"\"\n\n    v2 = 2\n    \"\"\"The second choice.\"\"\"\n</code></pre>"},{"location":"troubleshooting/#my-wrapped-function-shows-documentationcode-for-its-wrapper-instead-of-its-own","title":"My wrapped function shows documentation/code for its wrapper instead of its own","text":"<p>Use <code>functools.wraps()</code>:</p> <pre><code>from functools import wraps\n\n\ndef my_decorator(function):\n    \"\"\"The decorator docs.\"\"\"\n\n    @wraps(function)\n    def wrapped_function(*args, **kwargs):\n        print(\"hello\")\n        function(*args, **kwargs)\n        print(\"bye\")\n\n    return wrapped_function\n\n\n@my_decorator\ndef my_function(*args, **kwargs):\n    \"\"\"The function docs.\"\"\"\n    print(*args, **kwargs)\n</code></pre>"},{"location":"insiders/","title":"Insiders","text":"<p>mkdocstrings follows the sponsorware release strategy, which means that new features are first exclusively released to sponsors as part of Insiders. Read on to learn what sponsorships achieve, how to become a sponsor to get access to Insiders, and what's in it for you!</p>"},{"location":"insiders/#what-is-insiders","title":"What is Insiders?","text":"<p>mkdocstrings Insiders is a private fork of mkdocstrings, hosted as a private GitHub repository. Almost<sup>1</sup> all new features are developed as part of this fork, which means that they are immediately available to all eligible sponsors, as they are made collaborators of this repository.</p> <p>Every feature is tied to a funding goal in monthly subscriptions. When a funding goal is hit, the features that are tied to it are merged back into mkdocstrings and released for general availability, making them available to all users. Bugfixes are always released in tandem.</p> <p>Sponsorships start as low as $10 a month.<sup>2</sup></p>"},{"location":"insiders/#what-sponsorships-achieve","title":"What sponsorships achieve","text":"<p>Sponsorships make this project sustainable, as they buy the maintainers of this project time \u2013 a very scarce resource \u2013 which is spent on the development of new features, bug fixing, stability improvement, issue triage and general support. The biggest bottleneck in Open Source is time.<sup>3</sup></p> <p>If you're unsure if you should sponsor this project, check out the list of completed funding goals to learn whether you're already using features that were developed with the help of sponsorships. You're most likely using at least a handful of them, thanks to our awesome sponsors!</p>"},{"location":"insiders/#whats-in-it-for-me","title":"What's in it for me?","text":"<p>The moment you become a sponsor, you'll get immediate access to 15 additional features that you can start using right away, and which are currently exclusively available to sponsors:</p> <ul> <li> mkdocstrings-python \u2014 Relative cross-references </li> <li> mkdocstrings-python \u2014 Scoped cross-references </li> <li> mkdocstrings-c \u2014 [Project] A C handler for mkdocstrings </li> <li> mkdocstrings-typescript \u2014 [Project] A TypeScript handler for mkdocstrings</li> <li> griffe-typedoc \u2014 [Project] Signatures for entire TypeScript programs using TypeDoc</li> <li> mkdocstrings-python \u2014 Class inheritance diagrams with Mermaid</li> <li> mkdocstrings-python \u2014 Annotations modernization</li> <li> mkdocstrings-python \u2014 Parameter headings</li> <li> mkdocstrings-python \u2014 Automatic cross-references to parameters</li> <li> mkdocstrings-python \u2014 Automatic cross-references for default parameter values in signatures</li> <li> mkdocstrings-python \u2014 Automatic rendering of function signature overloads</li> <li> mkdocstrings-shell \u2014 [Project] Shell scripts/libraries handler for mkdocstrings</li> <li> mkdocstrings-python \u2014 Auto-summary of object members</li> <li> griffe-warnings-deprecated \u2014 [Project] Griffe extension for <code>@warnings.deprecated</code> (PEP 702)</li> <li> griffe-pydantic \u2014 [Project] Griffe extension for Pydantic</li> </ul> <p>These are just the features related to this project. See the complete feature list on the author's main Insiders page.</p>"},{"location":"insiders/#how-to-become-a-sponsor","title":"How to become a sponsor","text":"<p>Thanks for your interest in sponsoring! In order to become an eligible sponsor with your GitHub account, visit pawamoy's sponsor profile, and complete a sponsorship of $10 a month or more. You can use your individual or organization GitHub account for sponsoring.</p> <p>Sponsorships lower than $10 a month are also very much appreciated, and useful. They won't grant you access to Insiders, but they will be counted towards reaching sponsorship goals. Every sponsorship helps us implementing new features and releasing them to the public.</p> <p>Important: If you're sponsoring @pawamoy through a GitHub organization, please send a short email to insiders@pawamoy.fr with the name of your organization and the GitHub account of the individual that should be added as a collaborator.<sup>4</sup></p> <p>You can cancel your sponsorship anytime.<sup>5</sup></p> <p> \u00a0 Join our  awesome sponsors</p> <p>   If you sponsor publicly, you're automatically added here with a link to   your profile and avatar to show your support for mkdocstrings.   Alternatively, if you wish to keep your sponsorship private, you'll be a   silent +1. You can select visibility during checkout and change it   afterwards. </p>"},{"location":"insiders/#funding","title":"Funding","text":""},{"location":"insiders/#goals","title":"Goals","text":"<p>The following section lists all funding goals. Each goal contains a list of features prefixed with a checkmark symbol, denoting whether a feature is  already available or   planned, but not yet implemented. When the funding goal is hit, the features are released for general availability.</p> <p></p>"},{"location":"insiders/#1000-gravifridge-fluid-renewal","title":"$ 1,000 \u2014 GraviFridge Fluid Renewal","text":"<ul> <li> griffe-pydantic \u2014 [Project] Griffe extension for Pydantic</li> <li> griffe-warnings-deprecated \u2014 [Project] Griffe extension for <code>@warnings.deprecated</code> (PEP 702)</li> <li> mkdocstrings-python \u2014 Auto-summary of object members</li> <li> mkdocstrings-python \u2014 Automatic rendering of function signature overloads</li> <li> mkdocstrings-python \u2014 Parameter headings</li> <li> mkdocstrings-python \u2014 Automatic cross-references to parameters</li> <li> mkdocstrings-python \u2014 Automatic cross-references for default parameter values in signatures</li> <li> mkdocstrings-shell \u2014 [Project] Shell scripts/libraries handler for mkdocstrings</li> </ul>"},{"location":"insiders/#1500-hyperlamp-navigation-tips","title":"$ 1,500 \u2014 HyperLamp Navigation Tips","text":"<ul> <li> griffe-typedoc \u2014 [Project] Signatures for entire TypeScript programs using TypeDoc</li> <li> mkdocstrings-python \u2014 Class inheritance diagrams with Mermaid</li> <li> mkdocstrings-python \u2014 Annotations modernization</li> </ul>"},{"location":"insiders/#2000-fusiondrive-ejection-configuration","title":"$ 2,000 \u2014 FusionDrive Ejection Configuration","text":"<ul> <li> mkdocstrings-c \u2014 [Project] A C handler for mkdocstrings</li> <li> mkdocstrings-python \u2014 Relative cross-references</li> <li> mkdocstrings-python \u2014 Scoped cross-references</li> <li> mkdocstrings-typescript \u2014 [Project] A TypeScript handler for mkdocstrings</li> </ul>"},{"location":"insiders/#goals-completed","title":"Goals completed","text":"<p>This section lists all funding goals that were previously completed, which means that those features were part of Insiders, but are now generally available and can be used by all users.</p> <p></p>"},{"location":"insiders/#500-plasmavac-user-guide","title":"$ 500 \u2014 PlasmaVac User Guide","text":"<ul> <li> griffe-inherited-docstrings \u2014 [Project] Griffe extension for inheriting docstrings</li> <li> mkdocstrings-python \u2014 Cross-references for type annotations in signatures</li> <li> mkdocstrings-python \u2014 Symbol types in headings and table of contents</li> </ul>"},{"location":"insiders/#frequently-asked-questions","title":"Frequently asked questions","text":""},{"location":"insiders/#compatibility","title":"Compatibility","text":"<p>We're building an open source project and want to allow outside collaborators to use mkdocstrings locally without having access to Insiders. Is this still possible?</p> <p>Yes. Insiders is compatible with mkdocstrings. Almost all new features and configuration options are either backward-compatible or implemented behind feature flags. Most Insiders features enhance the overall experience, though while these features add value for the users of your project, they shouldn't be necessary for previewing when making changes to content.</p>"},{"location":"insiders/#payment","title":"Payment","text":"<p>We don't want to pay for sponsorship every month. Are there any other options?</p> <p>Yes. You can sponsor on a yearly basis by switching your GitHub account to a yearly billing cycle. If for some reason you cannot do that, you could also create a dedicated GitHub account with a yearly billing cycle, which you only use for sponsoring (some sponsors already do that).</p> <p>If you have any problems or further questions, please reach out to insiders@pawamoy.fr.</p>"},{"location":"insiders/#terms","title":"Terms","text":"<p>Are we allowed to use Insiders under the same terms and conditions as mkdocstrings?</p> <p>Yes. Whether you're an individual or a company, you may use mkdocstrings Insiders precisely under the same terms as mkdocstrings, which are given by the ISC License. However, we kindly ask you to respect our fair use policy:</p> <ul> <li> <p>Please don't distribute the source code of Insiders. You may freely use   it for public, private or commercial projects, privately fork or mirror it,   but please don't make the source code public, as it would counteract the    sponsorware strategy.</p> </li> <li> <p>If you cancel your subscription, you're automatically removed as a   collaborator and will miss out on all future updates of Insiders. However, you   may use the latest version that's available to you as long as you like.   Just remember that GitHub deletes private forks.</p> </li> </ul> <ol> <li> <p>In general, every new feature is first exclusively released to sponsors, but sometimes upstream dependencies enhance existing features that must be supported by mkdocstrings.\u00a0\u21a9</p> </li> <li> <p>Note that $10 a month is the minimum amount to become eligible for Insiders. While GitHub Sponsors also allows to sponsor lower amounts or one-time amounts, those can't be granted access to Insiders due to technical reasons. Such contributions are still very much welcome as they help ensuring the project's sustainability.\u00a0\u21a9</p> </li> <li> <p>Making an Open Source project sustainable is exceptionally hard: maintainers burn out, projects are abandoned. That's not great and very unpredictable. The sponsorware model ensures that if you decide to use mkdocstrings, you can be sure that bugs are fixed quickly and new features are added regularly.\u00a0\u21a9</p> </li> <li> <p>It's currently not possible to grant access to each member of an organization, as GitHub only allows for adding users. Thus, after sponsoring, please send an email to insiders@pawamoy.fr, stating which account should become a collaborator of the Insiders repository. We're working on a solution which will make access to organizations much simpler. To ensure that access is not tied to a particular individual GitHub account, create a bot account (i.e. a GitHub account that is not tied to a specific individual), and use this account for the sponsoring. After being added to the list of collaborators, the bot account can create a private fork of the private Insiders GitHub repository, and grant access to all members of the organizations.\u00a0\u21a9</p> </li> <li> <p>If you cancel your sponsorship, GitHub schedules a cancellation request which will become effective at the end of the billing cycle. This means that even though you cancel your sponsorship, you will keep your access to Insiders as long as your cancellation isn't effective. All charges are processed by GitHub through Stripe. As we don't receive any information regarding your payment, and GitHub doesn't offer refunds, sponsorships are non-refundable.\u00a0\u21a9</p> </li> </ol>"},{"location":"insiders/changelog/","title":"Changelog","text":""},{"location":"insiders/changelog/#mkdocstrings-insiders","title":"mkdocstrings Insiders","text":""},{"location":"insiders/installation/","title":"Getting started with Insiders","text":"<p>mkdocstrings Insiders is a compatible drop-in replacement for mkdocstrings, and can be installed similarly using <code>pip</code> or <code>git</code>. Note that in order to access the Insiders  repository, you need to become an eligible sponsor of @pawamoy on GitHub.</p>"},{"location":"insiders/installation/#installation","title":"Installation","text":""},{"location":"insiders/installation/#with-pypi-insiders","title":"with PyPI Insiders","text":"<p>PyPI Insiders is a tool that helps you keep up-to-date versions of Insiders projects in the PyPI index of your choice (self-hosted, Google registry, Artifactory, etc.).</p> <p>See how to install it and how to use it.</p> <p>We kindly ask that you do not upload the distributions to public registries, as it is against our Terms of use.</p>"},{"location":"insiders/installation/#with-pip-sshhttps","title":"with pip (ssh/https)","text":"<p>mkdocstrings Insiders can be installed with <code>pip</code> using SSH:</p> <pre><code>pip install git+ssh://git@github.com/pawamoy-insiders/mkdocstrings.git\n</code></pre> <p>Or using HTTPS:</p> <pre><code>pip install git+https://${GH_TOKEN}@github.com/pawamoy-insiders/mkdocstrings.git\n</code></pre> How to get a GitHub personal access token <p>The <code>GH_TOKEN</code> environment variable is a GitHub token. It can be obtained by creating a personal access token for your GitHub account. It will give you access to the Insiders repository, programmatically, from the command line or GitHub Actions workflows:</p> <ol> <li>Go to https://github.com/settings/tokens</li> <li>Click on Generate a new token</li> <li>Enter a name and select the <code>repo</code> scope</li> <li>Generate the token and store it in a safe place</li> </ol> <p>Note that the personal access token must be kept secret at all times, as it allows the owner to access your private repositories.</p>"},{"location":"insiders/installation/#with-git","title":"with Git","text":"<p>Of course, you can use mkdocstrings Insiders directly using Git:</p> <pre><code>git clone git@github.com:pawamoy-insiders/mkdocstrings\n</code></pre> <p>When cloning with Git, the package must be installed:</p> <pre><code>pip install -e mkdocstrings\n</code></pre>"},{"location":"insiders/installation/#upgrading","title":"Upgrading","text":"<p>When upgrading Insiders, you should always check the version of mkdocstrings which makes up the first part of the version qualifier. For example, a version like <code>8.x.x.4.x.x</code> means that Insiders <code>4.x.x</code> is currently based on <code>8.x.x</code>.</p> <p>If the major version increased, it's a good idea to consult the changelog and go through the steps to ensure your configuration is up to date and all necessary changes have been made.</p>"},{"location":"reference/","title":"mkdocstrings","text":""},{"location":"reference/#mkdocstrings","title":"mkdocstrings","text":"<p>mkdocstrings package.</p> <p>Automatic documentation from sources, for MkDocs.</p> <p>Modules:</p> <ul> <li> <code>debug</code>           \u2013            <p>Debugging utilities.</p> </li> <li> <code>extension</code>           \u2013            <p>This module holds the code of the Markdown extension responsible for matching \"autodoc\" instructions.</p> </li> <li> <code>handlers</code>           \u2013            <p>Handlers module.</p> </li> <li> <code>inventory</code>           \u2013            <p>Module responsible for the objects inventory.</p> </li> <li> <code>loggers</code>           \u2013            <p>Logging functions.</p> </li> <li> <code>plugin</code>           \u2013            <p>This module contains the \"mkdocstrings\" plugin for MkDocs.</p> </li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> mkdocstrings<ul> <li> debug</li> <li> extension</li> <li> handlers<ul> <li> base</li> <li> rendering</li> </ul> </li> <li> inventory</li> <li> loggers</li> <li> plugin</li> </ul> </li> </ul>"},{"location":"reference/debug/","title":"mkdocstrings.debug","text":""},{"location":"reference/debug/#mkdocstrings.debug","title":"debug","text":"<p>Debugging utilities.</p> <p>Classes:</p> <ul> <li> <code>Environment</code>           \u2013            <p>Dataclass to store environment information.</p> </li> <li> <code>Package</code>           \u2013            <p>Dataclass describing a Python package.</p> </li> <li> <code>Variable</code>           \u2013            <p>Dataclass describing an environment variable.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_debug_info</code>             \u2013              <p>Get debug/environment information.</p> </li> <li> <code>get_version</code>             \u2013              <p>Get version of the given distribution.</p> </li> <li> <code>print_debug_info</code>             \u2013              <p>Print debug/environment information.</p> </li> </ul>"},{"location":"reference/debug/#mkdocstrings.debug.Environment","title":"Environment  <code>dataclass</code>","text":"<pre><code>Environment(\n    interpreter_name: str,\n    interpreter_version: str,\n    interpreter_path: str,\n    platform: str,\n    packages: list[Package],\n    variables: list[Variable],\n)\n</code></pre> <p>Dataclass to store environment information.</p> <p>Attributes:</p> <ul> <li> <code>interpreter_name</code>               (<code>str</code>)           \u2013            <p>Python interpreter name.</p> </li> <li> <code>interpreter_path</code>               (<code>str</code>)           \u2013            <p>Path to Python executable.</p> </li> <li> <code>interpreter_version</code>               (<code>str</code>)           \u2013            <p>Python interpreter version.</p> </li> <li> <code>packages</code>               (<code>list[Package]</code>)           \u2013            <p>Installed packages.</p> </li> <li> <code>platform</code>               (<code>str</code>)           \u2013            <p>Operating System.</p> </li> <li> <code>variables</code>               (<code>list[Variable]</code>)           \u2013            <p>Environment variables.</p> </li> </ul>"},{"location":"reference/debug/#mkdocstrings.debug.Environment.interpreter_name","title":"interpreter_name  <code>instance-attribute</code>","text":"<pre><code>interpreter_name: str\n</code></pre> <p>Python interpreter name.</p>"},{"location":"reference/debug/#mkdocstrings.debug.Environment.interpreter_path","title":"interpreter_path  <code>instance-attribute</code>","text":"<pre><code>interpreter_path: str\n</code></pre> <p>Path to Python executable.</p>"},{"location":"reference/debug/#mkdocstrings.debug.Environment.interpreter_version","title":"interpreter_version  <code>instance-attribute</code>","text":"<pre><code>interpreter_version: str\n</code></pre> <p>Python interpreter version.</p>"},{"location":"reference/debug/#mkdocstrings.debug.Environment.packages","title":"packages  <code>instance-attribute</code>","text":"<pre><code>packages: list[Package]\n</code></pre> <p>Installed packages.</p>"},{"location":"reference/debug/#mkdocstrings.debug.Environment.platform","title":"platform  <code>instance-attribute</code>","text":"<pre><code>platform: str\n</code></pre> <p>Operating System.</p>"},{"location":"reference/debug/#mkdocstrings.debug.Environment.variables","title":"variables  <code>instance-attribute</code>","text":"<pre><code>variables: list[Variable]\n</code></pre> <p>Environment variables.</p>"},{"location":"reference/debug/#mkdocstrings.debug.Package","title":"Package  <code>dataclass</code>","text":"<pre><code>Package(name: str, version: str)\n</code></pre> <p>Dataclass describing a Python package.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Package name.</p> </li> <li> <code>version</code>               (<code>str</code>)           \u2013            <p>Package version.</p> </li> </ul>"},{"location":"reference/debug/#mkdocstrings.debug.Package.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Package name.</p>"},{"location":"reference/debug/#mkdocstrings.debug.Package.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version: str\n</code></pre> <p>Package version.</p>"},{"location":"reference/debug/#mkdocstrings.debug.Variable","title":"Variable  <code>dataclass</code>","text":"<pre><code>Variable(name: str, value: str)\n</code></pre> <p>Dataclass describing an environment variable.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Variable name.</p> </li> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>Variable value.</p> </li> </ul>"},{"location":"reference/debug/#mkdocstrings.debug.Variable.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Variable name.</p>"},{"location":"reference/debug/#mkdocstrings.debug.Variable.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Variable value.</p>"},{"location":"reference/debug/#mkdocstrings.debug.get_debug_info","title":"get_debug_info","text":"<pre><code>get_debug_info() -&gt; Environment\n</code></pre> <p>Get debug/environment information.</p> <p>Returns:</p> <ul> <li> <code>Environment</code>           \u2013            <p>Environment information.</p> </li> </ul> Source code in <code>src/mkdocstrings/debug.py</code> <pre><code>def get_debug_info() -&gt; Environment:\n    \"\"\"Get debug/environment information.\n\n    Returns:\n        Environment information.\n    \"\"\"\n    py_name, py_version = _interpreter_name_version()\n    packages = [\"mkdocstrings\"]\n    variables = [\"PYTHONPATH\", *[var for var in os.environ if var.startswith(\"MKDOCSTRINGS\")]]\n    return Environment(\n        interpreter_name=py_name,\n        interpreter_version=py_version,\n        interpreter_path=sys.executable,\n        platform=platform.platform(),\n        variables=[Variable(var, val) for var in variables if (val := os.getenv(var))],\n        packages=[Package(pkg, get_version(pkg)) for pkg in packages],\n    )\n</code></pre>"},{"location":"reference/debug/#mkdocstrings.debug.get_version","title":"get_version","text":"<pre><code>get_version(dist: str = 'mkdocstrings') -&gt; str\n</code></pre> <p>Get version of the given distribution.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A version number.</p> </li> </ul> Source code in <code>src/mkdocstrings/debug.py</code> <pre><code>def get_version(dist: str = \"mkdocstrings\") -&gt; str:\n    \"\"\"Get version of the given distribution.\n\n    Parameters:\n        dist: A distribution name.\n\n    Returns:\n        A version number.\n    \"\"\"\n    try:\n        return metadata.version(dist)\n    except metadata.PackageNotFoundError:\n        return \"0.0.0\"\n</code></pre>"},{"location":"reference/debug/#mkdocstrings.debug.get_version(dist)","title":"<code>dist</code>","text":"(<code>str</code>, default:                   <code>'mkdocstrings'</code> )           \u2013            <p>A distribution name.</p>"},{"location":"reference/debug/#mkdocstrings.debug.print_debug_info","title":"print_debug_info","text":"<pre><code>print_debug_info() -&gt; None\n</code></pre> <p>Print debug/environment information.</p> Source code in <code>src/mkdocstrings/debug.py</code> <pre><code>def print_debug_info() -&gt; None:\n    \"\"\"Print debug/environment information.\"\"\"\n    info = get_debug_info()\n    print(f\"- __System__: {info.platform}\")\n    print(f\"- __Python__: {info.interpreter_name} {info.interpreter_version} ({info.interpreter_path})\")\n    print(\"- __Environment variables__:\")\n    for var in info.variables:\n        print(f\"  - `{var.name}`: `{var.value}`\")\n    print(\"- __Installed packages__:\")\n    for pkg in info.packages:\n        print(f\"  - `{pkg.name}` v{pkg.version}\")\n</code></pre>"},{"location":"reference/extension/","title":"mkdocstrings.extension","text":""},{"location":"reference/extension/#mkdocstrings.extension","title":"extension","text":"<p>This module holds the code of the Markdown extension responsible for matching \"autodoc\" instructions.</p> <p>The extension is composed of a Markdown block processor that matches indented blocks starting with a line like <code>::: identifier</code>.</p> <p>For each of these blocks, it uses a handler to collect documentation about the given identifier and render it with Jinja templates.</p> <p>Both the collection and rendering process can be configured by adding YAML configuration under the \"autodoc\" instruction:</p> <pre><code>::: some.identifier\n    handler: python\n    options:\n      option1: value1\n      option2:\n      - value2a\n      - value2b\n      option_x: etc\n</code></pre> <p>Classes:</p> <ul> <li> <code>AutoDocProcessor</code>           \u2013            <p>Our \"autodoc\" Markdown block processor.</p> </li> <li> <code>MkdocstringsExtension</code>           \u2013            <p>Our Markdown extension.</p> </li> </ul>"},{"location":"reference/extension/#mkdocstrings.extension.AutoDocProcessor","title":"AutoDocProcessor","text":"<pre><code>AutoDocProcessor(\n    parser: BlockParser,\n    md: Markdown,\n    config: dict,\n    handlers: Handlers,\n    autorefs: AutorefsPlugin,\n)\n</code></pre> <p>               Bases: <code>BlockProcessor</code></p> <p>Our \"autodoc\" Markdown block processor.</p> <p>It has a <code>test</code> method that tells if a block matches a criterion, and a <code>run</code> method that processes it.</p> <p>It also has utility methods allowing to get handlers and their configuration easily, useful when processing a matched block.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>run</code>             \u2013              <p>Run code on the matched blocks.</p> </li> <li> <code>test</code>             \u2013              <p>Match our autodoc instructions.</p> </li> </ul> Source code in <code>src/mkdocstrings/extension.py</code> <pre><code>def __init__(\n    self,\n    parser: BlockParser,\n    md: Markdown,\n    config: dict,\n    handlers: Handlers,\n    autorefs: AutorefsPlugin,\n) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Arguments:\n        parser: A `markdown.blockparser.BlockParser` instance.\n        md: A `markdown.Markdown` instance.\n        config: The [configuration][mkdocstrings.plugin.PluginConfig] of the `mkdocstrings` plugin.\n        handlers: The handlers container.\n        autorefs: The autorefs plugin instance.\n    \"\"\"\n    super().__init__(parser=parser)\n    self.md = md\n    self._config = config\n    self._handlers = handlers\n    self._autorefs = autorefs\n    self._updated_envs: set = set()\n</code></pre>"},{"location":"reference/extension/#mkdocstrings.extension.AutoDocProcessor(parser)","title":"<code>parser</code>","text":"(<code>BlockParser</code>)           \u2013            <p>A <code>markdown.blockparser.BlockParser</code> instance.</p>"},{"location":"reference/extension/#mkdocstrings.extension.AutoDocProcessor(md)","title":"<code>md</code>","text":"(<code>Markdown</code>)           \u2013            <p>A <code>markdown.Markdown</code> instance.</p>"},{"location":"reference/extension/#mkdocstrings.extension.AutoDocProcessor(config)","title":"<code>config</code>","text":"(<code>dict</code>)           \u2013            <p>The configuration of the <code>mkdocstrings</code> plugin.</p>"},{"location":"reference/extension/#mkdocstrings.extension.AutoDocProcessor(handlers)","title":"<code>handlers</code>","text":"(<code>Handlers</code>)           \u2013            <p>The handlers container.</p>"},{"location":"reference/extension/#mkdocstrings.extension.AutoDocProcessor(autorefs)","title":"<code>autorefs</code>","text":"(<code>AutorefsPlugin</code>)           \u2013            <p>The autorefs plugin instance.</p>"},{"location":"reference/extension/#mkdocstrings.extension.AutoDocProcessor.run","title":"run","text":"<pre><code>run(parent: Element, blocks: MutableSequence[str]) -&gt; None\n</code></pre> <p>Run code on the matched blocks.</p> <p>The identifier and configuration lines are retrieved from a matched block and used to collect and render an object.</p> <p>Parameters:</p> Source code in <code>src/mkdocstrings/extension.py</code> <pre><code>def run(self, parent: Element, blocks: MutableSequence[str]) -&gt; None:\n    \"\"\"Run code on the matched blocks.\n\n    The identifier and configuration lines are retrieved from a matched block\n    and used to collect and render an object.\n\n    Arguments:\n        parent: The parent element in the XML tree.\n        blocks: The rest of the blocks to be processed.\n    \"\"\"\n    block = blocks.pop(0)\n    match = self.regex.search(block)\n\n    if match:\n        if match.start() &gt; 0:\n            self.parser.parseBlocks(parent, [block[: match.start()]])\n        # removes the first line\n        block = block[match.end() :]\n\n    block, the_rest = self.detab(block)\n\n    if not block and blocks and blocks[0].startswith((\"    handler:\", \"    options:\")):\n        # YAML options were separated from the `:::` line by a blank line.\n        block = blocks.pop(0)\n\n    if match:\n        identifier = match[\"name\"]\n        heading_level = match[\"heading\"].count(\"#\")\n        log.debug(f\"Matched '::: {identifier}'\")\n\n        html, handler, data = self._process_block(identifier, block, heading_level)\n        el = Element(\"div\", {\"class\": \"mkdocstrings\"})\n        # The final HTML is inserted as opaque to subsequent processing, and only revealed at the end.\n        el.text = self.md.htmlStash.store(html)\n        # We need to duplicate the headings directly, just so 'toc' can pick them up,\n        # otherwise they wouldn't appear in the final table of contents.\n        # These headings are generated by the `BaseHandler.do_heading` method (Jinja filter),\n        # which runs in the inner Markdown conversion layer, and not in the outer one where we are now.\n        headings = handler.get_headings()\n        el.extend(headings)\n        # These duplicated headings will later be removed by our `_HeadingsPostProcessor` processor,\n        # which runs right after 'toc' (see `MkdocstringsExtension.extendMarkdown`).\n\n        page = self._autorefs.current_page\n        if page is not None:\n            for heading in headings:\n                rendered_anchor = heading.attrib[\"id\"]\n                self._autorefs.register_anchor(page, rendered_anchor)\n\n                if \"data-role\" in heading.attrib:\n                    self._handlers.inventory.register(\n                        name=rendered_anchor,\n                        domain=handler.domain,\n                        role=heading.attrib[\"data-role\"],\n                        priority=1,  # register with standard priority\n                        uri=f\"{page}#{rendered_anchor}\",\n                    )\n\n                    # also register other anchors for this object in the inventory\n                    try:\n                        data_object = handler.collect(rendered_anchor, handler.fallback_config)\n                    except CollectionError:\n                        continue\n                    for anchor in handler.get_anchors(data_object):\n                        if anchor not in self._handlers.inventory:\n                            self._handlers.inventory.register(\n                                name=anchor,\n                                domain=handler.domain,\n                                role=heading.attrib[\"data-role\"],\n                                priority=2,  # register with lower priority\n                                uri=f\"{page}#{rendered_anchor}\",\n                            )\n\n        parent.append(el)\n\n    if the_rest:\n        # This block contained unindented line(s) after the first indented\n        # line. Insert these lines as the first block of the master blocks\n        # list for future processing.\n        blocks.insert(0, the_rest)\n</code></pre>"},{"location":"reference/extension/#mkdocstrings.extension.AutoDocProcessor.run(parent)","title":"<code>parent</code>","text":"(<code>Element</code>)           \u2013            <p>The parent element in the XML tree.</p>"},{"location":"reference/extension/#mkdocstrings.extension.AutoDocProcessor.run(blocks)","title":"<code>blocks</code>","text":"(<code>MutableSequence[str]</code>)           \u2013            <p>The rest of the blocks to be processed.</p>"},{"location":"reference/extension/#mkdocstrings.extension.AutoDocProcessor.test","title":"test","text":"<pre><code>test(parent: Element, block: str) -&gt; bool\n</code></pre> <p>Match our autodoc instructions.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Whether this block should be processed or not.</p> </li> </ul> Source code in <code>src/mkdocstrings/extension.py</code> <pre><code>def test(self, parent: Element, block: str) -&gt; bool:  # noqa: ARG002\n    \"\"\"Match our autodoc instructions.\n\n    Arguments:\n        parent: The parent element in the XML tree.\n        block: The block to be tested.\n\n    Returns:\n        Whether this block should be processed or not.\n    \"\"\"\n    return bool(self.regex.search(block))\n</code></pre>"},{"location":"reference/extension/#mkdocstrings.extension.AutoDocProcessor.test(parent)","title":"<code>parent</code>","text":"(<code>Element</code>)           \u2013            <p>The parent element in the XML tree.</p>"},{"location":"reference/extension/#mkdocstrings.extension.AutoDocProcessor.test(block)","title":"<code>block</code>","text":"(<code>str</code>)           \u2013            <p>The block to be tested.</p>"},{"location":"reference/extension/#mkdocstrings.extension.MkdocstringsExtension","title":"MkdocstringsExtension","text":"<pre><code>MkdocstringsExtension(\n    config: dict,\n    handlers: Handlers,\n    autorefs: AutorefsPlugin,\n    **kwargs: Any,\n)\n</code></pre> <p>               Bases: <code>Extension</code></p> <p>Our Markdown extension.</p> <p>It cannot work outside of <code>mkdocstrings</code>.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>extendMarkdown</code>             \u2013              <p>Register the extension.</p> </li> </ul> Source code in <code>src/mkdocstrings/extension.py</code> <pre><code>def __init__(self, config: dict, handlers: Handlers, autorefs: AutorefsPlugin, **kwargs: Any) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Arguments:\n        config: The configuration items from `mkdocs` and `mkdocstrings` that must be passed to the block processor\n            when instantiated in [`extendMarkdown`][mkdocstrings.extension.MkdocstringsExtension.extendMarkdown].\n        handlers: The handlers container.\n        autorefs: The autorefs plugin instance.\n        **kwargs: Keyword arguments used by `markdown.extensions.Extension`.\n    \"\"\"\n    super().__init__(**kwargs)\n    self._config = config\n    self._handlers = handlers\n    self._autorefs = autorefs\n</code></pre>"},{"location":"reference/extension/#mkdocstrings.extension.MkdocstringsExtension(config)","title":"<code>config</code>","text":"(<code>dict</code>)           \u2013            <p>The configuration items from <code>mkdocs</code> and <code>mkdocstrings</code> that must be passed to the block processor when instantiated in <code>extendMarkdown</code>.</p>"},{"location":"reference/extension/#mkdocstrings.extension.MkdocstringsExtension(handlers)","title":"<code>handlers</code>","text":"(<code>Handlers</code>)           \u2013            <p>The handlers container.</p>"},{"location":"reference/extension/#mkdocstrings.extension.MkdocstringsExtension(autorefs)","title":"<code>autorefs</code>","text":"(<code>AutorefsPlugin</code>)           \u2013            <p>The autorefs plugin instance.</p>"},{"location":"reference/extension/#mkdocstrings.extension.MkdocstringsExtension(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments used by <code>markdown.extensions.Extension</code>.</p>"},{"location":"reference/extension/#mkdocstrings.extension.MkdocstringsExtension.extendMarkdown","title":"extendMarkdown","text":"<pre><code>extendMarkdown(md: Markdown) -&gt; None\n</code></pre> <p>Register the extension.</p> <p>Add an instance of our <code>AutoDocProcessor</code> to the Markdown parser.</p> <p>Parameters:</p> Source code in <code>src/mkdocstrings/extension.py</code> <pre><code>def extendMarkdown(self, md: Markdown) -&gt; None:  # noqa: N802 (casing: parent method's name)\n    \"\"\"Register the extension.\n\n    Add an instance of our [`AutoDocProcessor`][mkdocstrings.extension.AutoDocProcessor] to the Markdown parser.\n\n    Arguments:\n        md: A `markdown.Markdown` instance.\n    \"\"\"\n    md.parser.blockprocessors.register(\n        AutoDocProcessor(md.parser, md, self._config, self._handlers, self._autorefs),\n        \"mkdocstrings\",\n        priority=75,  # Right before markdown.blockprocessors.HashHeaderProcessor\n    )\n    md.treeprocessors.register(\n        _HeadingsPostProcessor(md),\n        \"mkdocstrings_post_headings\",\n        priority=4,  # Right after 'toc'.\n    )\n    md.treeprocessors.register(\n        _TocLabelsTreeProcessor(md),\n        \"mkdocstrings_post_toc_labels\",\n        priority=4,  # Right after 'toc'.\n    )\n</code></pre>"},{"location":"reference/extension/#mkdocstrings.extension.MkdocstringsExtension.extendMarkdown(md)","title":"<code>md</code>","text":"(<code>Markdown</code>)           \u2013            <p>A <code>markdown.Markdown</code> instance.</p>"},{"location":"reference/inventory/","title":"mkdocstrings.inventory","text":""},{"location":"reference/inventory/#mkdocstrings.inventory","title":"inventory","text":"<p>Module responsible for the objects inventory.</p> <p>Classes:</p> <ul> <li> <code>Inventory</code>           \u2013            <p>Inventory of collected and rendered objects.</p> </li> <li> <code>InventoryItem</code>           \u2013            <p>Inventory item.</p> </li> </ul>"},{"location":"reference/inventory/#mkdocstrings.inventory.Inventory","title":"Inventory","text":"<pre><code>Inventory(\n    items: list[InventoryItem] | None = None,\n    project: str = \"project\",\n    version: str = \"0.0.0\",\n)\n</code></pre> <p>               Bases: <code>dict</code></p> <p>Inventory of collected and rendered objects.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>format_sphinx</code>             \u2013              <p>Format this inventory as a Sphinx <code>objects.inv</code> file.</p> </li> <li> <code>parse_sphinx</code>             \u2013              <p>Parse a Sphinx v2 inventory file and return an <code>Inventory</code> from it.</p> </li> <li> <code>register</code>             \u2013              <p>Create and register an item.</p> </li> </ul> Source code in <code>src/mkdocstrings/inventory.py</code> <pre><code>def __init__(self, items: list[InventoryItem] | None = None, project: str = \"project\", version: str = \"0.0.0\"):\n    \"\"\"Initialize the object.\n\n    Arguments:\n        items: A list of items.\n        project: The project name.\n        version: The project version.\n    \"\"\"\n    super().__init__()\n    items = items or []\n    for item in items:\n        self[item.name] = item\n    self.project = project\n    self.version = version\n</code></pre>"},{"location":"reference/inventory/#mkdocstrings.inventory.Inventory(items)","title":"<code>items</code>","text":"(<code>list[InventoryItem] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of items.</p>"},{"location":"reference/inventory/#mkdocstrings.inventory.Inventory(project)","title":"<code>project</code>","text":"(<code>str</code>, default:                   <code>'project'</code> )           \u2013            <p>The project name.</p>"},{"location":"reference/inventory/#mkdocstrings.inventory.Inventory(version)","title":"<code>version</code>","text":"(<code>str</code>, default:                   <code>'0.0.0'</code> )           \u2013            <p>The project version.</p>"},{"location":"reference/inventory/#mkdocstrings.inventory.Inventory.format_sphinx","title":"format_sphinx","text":"<pre><code>format_sphinx() -&gt; bytes\n</code></pre> <p>Format this inventory as a Sphinx <code>objects.inv</code> file.</p> <p>Returns:</p> <ul> <li> <code>bytes</code>           \u2013            <p>The inventory as bytes.</p> </li> </ul> Source code in <code>src/mkdocstrings/inventory.py</code> <pre><code>def format_sphinx(self) -&gt; bytes:\n    \"\"\"Format this inventory as a Sphinx `objects.inv` file.\n\n    Returns:\n        The inventory as bytes.\n    \"\"\"\n    header = (\n        dedent(\n            f\"\"\"\n            # Sphinx inventory version 2\n            # Project: {self.project}\n            # Version: {self.version}\n            # The remainder of this file is compressed using zlib.\n            \"\"\",\n        )\n        .lstrip()\n        .encode(\"utf8\")\n    )\n\n    lines = [\n        item.format_sphinx().encode(\"utf8\")\n        for item in sorted(self.values(), key=lambda item: (item.domain, item.name))\n    ]\n    return header + zlib.compress(b\"\\n\".join(lines) + b\"\\n\", 9)\n</code></pre>"},{"location":"reference/inventory/#mkdocstrings.inventory.Inventory.parse_sphinx","title":"parse_sphinx  <code>classmethod</code>","text":"<pre><code>parse_sphinx(\n    in_file: BinaryIO,\n    *,\n    domain_filter: Collection[str] = ()\n) -&gt; Inventory\n</code></pre> <p>Parse a Sphinx v2 inventory file and return an <code>Inventory</code> from it.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Inventory</code>           \u2013            <p>An inventory containing the collected items.</p> </li> </ul> Source code in <code>src/mkdocstrings/inventory.py</code> <pre><code>@classmethod\ndef parse_sphinx(cls, in_file: BinaryIO, *, domain_filter: Collection[str] = ()) -&gt; Inventory:\n    \"\"\"Parse a Sphinx v2 inventory file and return an `Inventory` from it.\n\n    Arguments:\n        in_file: The binary file-like object to read from.\n        domain_filter: A collection of domain values to allow (and filter out all other ones).\n\n    Returns:\n        An inventory containing the collected items.\n    \"\"\"\n    for _ in range(4):\n        in_file.readline()\n    lines = zlib.decompress(in_file.read()).splitlines()\n    items = [InventoryItem.parse_sphinx(line.decode(\"utf8\")) for line in lines]\n    if domain_filter:\n        items = [item for item in items if item.domain in domain_filter]\n    return cls(items)\n</code></pre>"},{"location":"reference/inventory/#mkdocstrings.inventory.Inventory.parse_sphinx(in_file)","title":"<code>in_file</code>","text":"(<code>BinaryIO</code>)           \u2013            <p>The binary file-like object to read from.</p>"},{"location":"reference/inventory/#mkdocstrings.inventory.Inventory.parse_sphinx(domain_filter)","title":"<code>domain_filter</code>","text":"(<code>Collection[str]</code>, default:                   <code>()</code> )           \u2013            <p>A collection of domain values to allow (and filter out all other ones).</p>"},{"location":"reference/inventory/#mkdocstrings.inventory.Inventory.register","title":"register","text":"<pre><code>register(\n    name: str,\n    domain: str,\n    role: str,\n    uri: str,\n    priority: int = 1,\n    dispname: str | None = None,\n) -&gt; None\n</code></pre> <p>Create and register an item.</p> <p>Parameters:</p> Source code in <code>src/mkdocstrings/inventory.py</code> <pre><code>def register(\n    self,\n    name: str,\n    domain: str,\n    role: str,\n    uri: str,\n    priority: int = 1,\n    dispname: str | None = None,\n) -&gt; None:\n    \"\"\"Create and register an item.\n\n    Arguments:\n        name: The item name.\n        domain: The item domain, like 'python' or 'crystal'.\n        role: The item role, like 'class' or 'method'.\n        uri: The item URI.\n        priority: The item priority. Only used internally by mkdocstrings and Sphinx.\n        dispname: The item display name.\n    \"\"\"\n    self[name] = InventoryItem(\n        name=name,\n        domain=domain,\n        role=role,\n        uri=uri,\n        priority=priority,\n        dispname=dispname,\n    )\n</code></pre>"},{"location":"reference/inventory/#mkdocstrings.inventory.Inventory.register(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The item name.</p>"},{"location":"reference/inventory/#mkdocstrings.inventory.Inventory.register(domain)","title":"<code>domain</code>","text":"(<code>str</code>)           \u2013            <p>The item domain, like 'python' or 'crystal'.</p>"},{"location":"reference/inventory/#mkdocstrings.inventory.Inventory.register(role)","title":"<code>role</code>","text":"(<code>str</code>)           \u2013            <p>The item role, like 'class' or 'method'.</p>"},{"location":"reference/inventory/#mkdocstrings.inventory.Inventory.register(uri)","title":"<code>uri</code>","text":"(<code>str</code>)           \u2013            <p>The item URI.</p>"},{"location":"reference/inventory/#mkdocstrings.inventory.Inventory.register(priority)","title":"<code>priority</code>","text":"(<code>int</code>, default:                   <code>1</code> )           \u2013            <p>The item priority. Only used internally by mkdocstrings and Sphinx.</p>"},{"location":"reference/inventory/#mkdocstrings.inventory.Inventory.register(dispname)","title":"<code>dispname</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The item display name.</p>"},{"location":"reference/inventory/#mkdocstrings.inventory.InventoryItem","title":"InventoryItem","text":"<pre><code>InventoryItem(\n    name: str,\n    domain: str,\n    role: str,\n    uri: str,\n    priority: int = 1,\n    dispname: str | None = None,\n)\n</code></pre> <p>Inventory item.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>format_sphinx</code>             \u2013              <p>Format this item as a Sphinx inventory line.</p> </li> <li> <code>parse_sphinx</code>             \u2013              <p>Parse a line from a Sphinx v2 inventory file and return an <code>InventoryItem</code> from it.</p> </li> </ul> Source code in <code>src/mkdocstrings/inventory.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    domain: str,\n    role: str,\n    uri: str,\n    priority: int = 1,\n    dispname: str | None = None,\n):\n    \"\"\"Initialize the object.\n\n    Arguments:\n        name: The item name.\n        domain: The item domain, like 'python' or 'crystal'.\n        role: The item role, like 'class' or 'method'.\n        uri: The item URI.\n        priority: The item priority. Only used internally by mkdocstrings and Sphinx.\n        dispname: The item display name.\n    \"\"\"\n    self.name: str = name\n    self.domain: str = domain\n    self.role: str = role\n    self.uri: str = uri\n    self.priority: int = priority\n    self.dispname: str = dispname or name\n</code></pre>"},{"location":"reference/inventory/#mkdocstrings.inventory.InventoryItem(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The item name.</p>"},{"location":"reference/inventory/#mkdocstrings.inventory.InventoryItem(domain)","title":"<code>domain</code>","text":"(<code>str</code>)           \u2013            <p>The item domain, like 'python' or 'crystal'.</p>"},{"location":"reference/inventory/#mkdocstrings.inventory.InventoryItem(role)","title":"<code>role</code>","text":"(<code>str</code>)           \u2013            <p>The item role, like 'class' or 'method'.</p>"},{"location":"reference/inventory/#mkdocstrings.inventory.InventoryItem(uri)","title":"<code>uri</code>","text":"(<code>str</code>)           \u2013            <p>The item URI.</p>"},{"location":"reference/inventory/#mkdocstrings.inventory.InventoryItem(priority)","title":"<code>priority</code>","text":"(<code>int</code>, default:                   <code>1</code> )           \u2013            <p>The item priority. Only used internally by mkdocstrings and Sphinx.</p>"},{"location":"reference/inventory/#mkdocstrings.inventory.InventoryItem(dispname)","title":"<code>dispname</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The item display name.</p>"},{"location":"reference/inventory/#mkdocstrings.inventory.InventoryItem.format_sphinx","title":"format_sphinx","text":"<pre><code>format_sphinx() -&gt; str\n</code></pre> <p>Format this item as a Sphinx inventory line.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A line formatted for an <code>objects.inv</code> file.</p> </li> </ul> Source code in <code>src/mkdocstrings/inventory.py</code> <pre><code>def format_sphinx(self) -&gt; str:\n    \"\"\"Format this item as a Sphinx inventory line.\n\n    Returns:\n        A line formatted for an `objects.inv` file.\n    \"\"\"\n    dispname = self.dispname\n    if dispname == self.name:\n        dispname = \"-\"\n    uri = self.uri\n    if uri.endswith(self.name):\n        uri = uri[: -len(self.name)] + \"$\"\n    return f\"{self.name} {self.domain}:{self.role} {self.priority} {uri} {dispname}\"\n</code></pre>"},{"location":"reference/inventory/#mkdocstrings.inventory.InventoryItem.parse_sphinx","title":"parse_sphinx  <code>classmethod</code>","text":"<pre><code>parse_sphinx(line: str) -&gt; InventoryItem\n</code></pre> <p>Parse a line from a Sphinx v2 inventory file and return an <code>InventoryItem</code> from it.</p> Source code in <code>src/mkdocstrings/inventory.py</code> <pre><code>@classmethod\ndef parse_sphinx(cls, line: str) -&gt; InventoryItem:\n    \"\"\"Parse a line from a Sphinx v2 inventory file and return an `InventoryItem` from it.\"\"\"\n    match = cls.sphinx_item_regex.search(line)\n    if not match:\n        raise ValueError(line)\n    name, domain, role, priority, uri, dispname = match.groups()\n    if uri.endswith(\"$\"):\n        uri = uri[:-1] + name\n    if dispname == \"-\":\n        dispname = name\n    return cls(name, domain, role, uri, int(priority), dispname)\n</code></pre>"},{"location":"reference/loggers/","title":"mkdocstrings.loggers","text":""},{"location":"reference/loggers/#mkdocstrings.loggers","title":"loggers","text":"<p>Logging functions.</p> <p>Classes:</p> <ul> <li> <code>LoggerAdapter</code>           \u2013            <p>A logger adapter to prefix messages.</p> </li> <li> <code>TemplateLogger</code>           \u2013            <p>A wrapper class to allow logging in templates.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_logger</code>             \u2013              <p>Return a pre-configured logger.</p> </li> <li> <code>get_template_logger</code>             \u2013              <p>Return a logger usable in templates.</p> </li> <li> <code>get_template_logger_function</code>             \u2013              <p>Create a wrapper function that automatically receives the Jinja template context.</p> </li> <li> <code>get_template_path</code>             \u2013              <p>Return the path to the template currently using the given context.</p> </li> </ul>"},{"location":"reference/loggers/#mkdocstrings.loggers.LoggerAdapter","title":"LoggerAdapter","text":"<pre><code>LoggerAdapter(prefix: str, logger: Logger)\n</code></pre> <p>               Bases: <code>LoggerAdapter</code></p> <p>A logger adapter to prefix messages.</p> <p>This adapter also adds an additional parameter to logging methods called <code>once</code>: if <code>True</code>, the message will only be logged once.</p> <p>Examples:</p> <p>In Python code:</p> <pre><code>&gt;&gt;&gt; logger = get_logger(\"myplugin\")\n&gt;&gt;&gt; logger.debug(\"This is a debug message.\")\n&gt;&gt;&gt; logger.info(\"This is an info message.\", once=True)\n</code></pre> <p>In Jinja templates (logger available in context as <code>log</code>):</p> <pre><code>{{ log.debug(\"This is a debug message.\") }}\n{{ log.info(\"This is an info message.\", once=True) }}\n</code></pre> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>log</code>             \u2013              <p>Log a message.</p> </li> <li> <code>process</code>             \u2013              <p>Process the message.</p> </li> </ul> Source code in <code>src/mkdocstrings/loggers.py</code> <pre><code>def __init__(self, prefix: str, logger: logging.Logger):\n    \"\"\"Initialize the object.\n\n    Arguments:\n        prefix: The string to insert in front of every message.\n        logger: The logger instance.\n    \"\"\"\n    super().__init__(logger, {})\n    self.prefix = prefix\n    self._logged: set[tuple[LoggerAdapter, str]] = set()\n</code></pre>"},{"location":"reference/loggers/#mkdocstrings.loggers.LoggerAdapter(prefix)","title":"<code>prefix</code>","text":"(<code>str</code>)           \u2013            <p>The string to insert in front of every message.</p>"},{"location":"reference/loggers/#mkdocstrings.loggers.LoggerAdapter(logger)","title":"<code>logger</code>","text":"(<code>Logger</code>)           \u2013            <p>The logger instance.</p>"},{"location":"reference/loggers/#mkdocstrings.loggers.LoggerAdapter.log","title":"log","text":"<pre><code>log(\n    level: int, msg: object, *args: object, **kwargs: object\n) -&gt; None\n</code></pre> <p>Log a message.</p> <p>Parameters:</p> Source code in <code>src/mkdocstrings/loggers.py</code> <pre><code>def log(self, level: int, msg: object, *args: object, **kwargs: object) -&gt; None:\n    \"\"\"Log a message.\n\n    Arguments:\n        level: The logging level.\n        msg: The message.\n        *args: Additional arguments passed to parent method.\n        **kwargs: Additional keyword arguments passed to parent method.\n    \"\"\"\n    if kwargs.pop(\"once\", False):\n        if (key := (self, str(msg))) in self._logged:\n            return\n        self._logged.add(key)\n    super().log(level, msg, *args, **kwargs)  # type: ignore[arg-type]\n</code></pre>"},{"location":"reference/loggers/#mkdocstrings.loggers.LoggerAdapter.log(level)","title":"<code>level</code>","text":"(<code>int</code>)           \u2013            <p>The logging level.</p>"},{"location":"reference/loggers/#mkdocstrings.loggers.LoggerAdapter.log(msg)","title":"<code>msg</code>","text":"(<code>object</code>)           \u2013            <p>The message.</p>"},{"location":"reference/loggers/#mkdocstrings.loggers.LoggerAdapter.log(*args)","title":"<code>*args</code>","text":"(<code>object</code>, default:                   <code>()</code> )           \u2013            <p>Additional arguments passed to parent method.</p>"},{"location":"reference/loggers/#mkdocstrings.loggers.LoggerAdapter.log(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>object</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments passed to parent method.</p>"},{"location":"reference/loggers/#mkdocstrings.loggers.LoggerAdapter.process","title":"process","text":"<pre><code>process(\n    msg: str, kwargs: MutableMapping[str, Any]\n) -&gt; tuple[str, Any]\n</code></pre> <p>Process the message.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>tuple[str, Any]</code>           \u2013            <p>The processed message.</p> </li> </ul> Source code in <code>src/mkdocstrings/loggers.py</code> <pre><code>def process(self, msg: str, kwargs: MutableMapping[str, Any]) -&gt; tuple[str, Any]:\n    \"\"\"Process the message.\n\n    Arguments:\n        msg: The message:\n        kwargs: Remaining arguments.\n\n    Returns:\n        The processed message.\n    \"\"\"\n    return f\"{self.prefix}: {msg}\", kwargs\n</code></pre>"},{"location":"reference/loggers/#mkdocstrings.loggers.LoggerAdapter.process(msg)","title":"<code>msg</code>","text":"(<code>str</code>)           \u2013            <p>The message:</p>"},{"location":"reference/loggers/#mkdocstrings.loggers.LoggerAdapter.process(kwargs)","title":"<code>kwargs</code>","text":"(<code>MutableMapping[str, Any]</code>)           \u2013            <p>Remaining arguments.</p>"},{"location":"reference/loggers/#mkdocstrings.loggers.TemplateLogger","title":"TemplateLogger","text":"<pre><code>TemplateLogger(logger: LoggerAdapter)\n</code></pre> <p>A wrapper class to allow logging in templates.</p> <p>The logging methods provided by this class all accept two parameters:</p> <ul> <li><code>msg</code>: The message to log.</li> <li><code>once</code>: If <code>True</code>, the message will only be logged once.</li> </ul> <p>Methods:</p> <ul> <li> <code>debug</code>             \u2013              <p>Function to log a DEBUG message.</p> </li> <li> <code>info</code>             \u2013              <p>Function to log an INFO message.</p> </li> <li> <code>warning</code>             \u2013              <p>Function to log a WARNING message.</p> </li> <li> <code>error</code>             \u2013              <p>Function to log an ERROR message.</p> </li> <li> <code>critical</code>             \u2013              <p>Function to log a CRITICAL message.</p> </li> </ul> <p>Parameters:</p> <ul> <li> </li> </ul> Source code in <code>src/mkdocstrings/loggers.py</code> <pre><code>def __init__(self, logger: LoggerAdapter):\n    \"\"\"Initialize the object.\n\n    Arguments:\n        logger: A logger adapter.\n    \"\"\"\n    self.debug = get_template_logger_function(logger.debug)\n    self.info = get_template_logger_function(logger.info)\n    self.warning = get_template_logger_function(logger.warning)\n    self.error = get_template_logger_function(logger.error)\n    self.critical = get_template_logger_function(logger.critical)\n</code></pre>"},{"location":"reference/loggers/#mkdocstrings.loggers.TemplateLogger(logger)","title":"<code>logger</code>","text":"(<code>LoggerAdapter</code>)           \u2013            <p>A logger adapter.</p>"},{"location":"reference/loggers/#mkdocstrings.loggers.get_logger","title":"get_logger","text":"<pre><code>get_logger(name: str) -&gt; LoggerAdapter\n</code></pre> <p>Return a pre-configured logger.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>LoggerAdapter</code>           \u2013            <p>A logger configured to work well in MkDocs.</p> </li> </ul> Source code in <code>src/mkdocstrings/loggers.py</code> <pre><code>def get_logger(name: str) -&gt; LoggerAdapter:\n    \"\"\"Return a pre-configured logger.\n\n    Arguments:\n        name: The name to use with `logging.getLogger`.\n\n    Returns:\n        A logger configured to work well in MkDocs.\n    \"\"\"\n    logger = logging.getLogger(f\"mkdocs.plugins.{name}\")\n    return LoggerAdapter(name.split(\".\", 1)[0], logger)\n</code></pre>"},{"location":"reference/loggers/#mkdocstrings.loggers.get_logger(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The name to use with <code>logging.getLogger</code>.</p>"},{"location":"reference/loggers/#mkdocstrings.loggers.get_template_logger","title":"get_template_logger","text":"<pre><code>get_template_logger(\n    handler_name: str | None = None,\n) -&gt; TemplateLogger\n</code></pre> <p>Return a logger usable in templates.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>TemplateLogger</code>           \u2013            <p>A template logger.</p> </li> </ul> Source code in <code>src/mkdocstrings/loggers.py</code> <pre><code>def get_template_logger(handler_name: str | None = None) -&gt; TemplateLogger:\n    \"\"\"Return a logger usable in templates.\n\n    Parameters:\n        handler_name: The name of the handler.\n\n    Returns:\n        A template logger.\n    \"\"\"\n    handler_name = handler_name or \"base\"\n    return TemplateLogger(get_logger(f\"mkdocstrings_handlers.{handler_name}.templates\"))\n</code></pre>"},{"location":"reference/loggers/#mkdocstrings.loggers.get_template_logger(handler_name)","title":"<code>handler_name</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The name of the handler.</p>"},{"location":"reference/loggers/#mkdocstrings.loggers.get_template_logger_function","title":"get_template_logger_function","text":"<pre><code>get_template_logger_function(\n    logger_func: Callable,\n) -&gt; Callable\n</code></pre> <p>Create a wrapper function that automatically receives the Jinja template context.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Callable</code>           \u2013            <p>A function.</p> </li> </ul> Source code in <code>src/mkdocstrings/loggers.py</code> <pre><code>def get_template_logger_function(logger_func: Callable) -&gt; Callable:\n    \"\"\"Create a wrapper function that automatically receives the Jinja template context.\n\n    Arguments:\n        logger_func: The logger function to use within the wrapper.\n\n    Returns:\n        A function.\n    \"\"\"\n\n    @pass_context\n    def wrapper(context: Context, msg: str | None = None, **kwargs: Any) -&gt; str:\n        \"\"\"Log a message.\n\n        Arguments:\n            context: The template context, automatically provided by Jinja.\n            msg: The message to log.\n            **kwargs: Additional arguments passed to the logger function.\n\n        Returns:\n            An empty string.\n        \"\"\"\n        template_path = get_template_path(context)\n        logger_func(f\"{template_path}: {msg or 'Rendering'}\", **kwargs)\n        return \"\"\n\n    return wrapper\n</code></pre>"},{"location":"reference/loggers/#mkdocstrings.loggers.get_template_logger_function(logger_func)","title":"<code>logger_func</code>","text":"(<code>Callable</code>)           \u2013            <p>The logger function to use within the wrapper.</p>"},{"location":"reference/loggers/#mkdocstrings.loggers.get_template_path","title":"get_template_path","text":"<pre><code>get_template_path(context: Context) -&gt; str\n</code></pre> <p>Return the path to the template currently using the given context.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The relative path to the template.</p> </li> </ul> Source code in <code>src/mkdocstrings/loggers.py</code> <pre><code>def get_template_path(context: Context) -&gt; str:\n    \"\"\"Return the path to the template currently using the given context.\n\n    Arguments:\n        context: The template context.\n\n    Returns:\n        The relative path to the template.\n    \"\"\"\n    context_name: str = str(context.name)\n    filename = context.environment.get_template(context_name).filename\n    if filename:\n        for template_dir in TEMPLATES_DIRS:\n            with suppress(ValueError):\n                return str(Path(filename).relative_to(template_dir))\n        with suppress(ValueError):\n            return str(Path(filename).relative_to(Path.cwd()))\n        return filename\n    return context_name\n</code></pre>"},{"location":"reference/loggers/#mkdocstrings.loggers.get_template_path(context)","title":"<code>context</code>","text":"(<code>Context</code>)           \u2013            <p>The template context.</p>"},{"location":"reference/plugin/","title":"mkdocstrings.plugin","text":""},{"location":"reference/plugin/#mkdocstrings.plugin","title":"plugin","text":"<p>This module contains the \"mkdocstrings\" plugin for MkDocs.</p> <p>The plugin instantiates a Markdown extension (<code>MkdocstringsExtension</code>), and adds it to the list of Markdown extensions used by <code>mkdocs</code> during the <code>on_config</code> event hook.</p> <p>Once the documentation is built, the <code>on_post_build</code> event hook is triggered and calls the <code>handlers.teardown()</code> method. This method is used to teardown the handlers that were instantiated during documentation buildup.</p> <p>Finally, when serving the documentation, it can add directories to watch during the <code>on_serve</code> event hook.</p> <p>Classes:</p> <ul> <li> <code>MkdocstringsPlugin</code>           \u2013            <p>An <code>mkdocs</code> plugin.</p> </li> <li> <code>PluginConfig</code>           \u2013            <p>The configuration options of <code>mkdocstrings</code>, written in <code>mkdocs.yml</code>.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>list_to_tuple</code>             \u2013              <p>Decorater to convert lists to tuples in the arguments.</p> </li> </ul>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin","title":"MkdocstringsPlugin","text":"<pre><code>MkdocstringsPlugin()\n</code></pre> <p>               Bases: <code>BasePlugin[PluginConfig]</code></p> <p>An <code>mkdocs</code> plugin.</p> <p>This plugin defines the following event hooks:</p> <ul> <li><code>on_config</code></li> <li><code>on_env</code></li> <li><code>on_post_build</code></li> </ul> <p>Check the Developing Plugins page of <code>mkdocs</code> for more information about its plugin system.</p> <p>Methods:</p> <ul> <li> <code>get_handler</code>             \u2013              <p>Get a handler by its name. See mkdocstrings.handlers.base.Handlers.get_handler.</p> </li> <li> <code>on_config</code>             \u2013              <p>Instantiate our Markdown extension.</p> </li> <li> <code>on_env</code>             \u2013              <p>Extra actions that need to happen after all Markdown rendering and before HTML rendering.</p> </li> <li> <code>on_post_build</code>             \u2013              <p>Teardown the handlers.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>handlers</code>               (<code>Handlers</code>)           \u2013            <p>Get the instance of mkdocstrings.handlers.base.Handlers for this plugin/build.</p> </li> <li> <code>inventory_enabled</code>               (<code>bool</code>)           \u2013            <p>Tell if the inventory is enabled or not.</p> </li> <li> <code>plugin_enabled</code>               (<code>bool</code>)           \u2013            <p>Tell if the plugin is enabled or not.</p> </li> </ul> Source code in <code>src/mkdocstrings/plugin.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the object.\"\"\"\n    super().__init__()\n    self._handlers: Handlers | None = None\n</code></pre>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.handlers","title":"handlers  <code>property</code>","text":"<pre><code>handlers: Handlers\n</code></pre> <p>Get the instance of mkdocstrings.handlers.base.Handlers for this plugin/build.</p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>If the plugin hasn't been initialized with a config.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Handlers</code>           \u2013            <p>An instance of mkdocstrings.handlers.base.Handlers (the same throughout the build).</p> </li> </ul>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.inventory_enabled","title":"inventory_enabled  <code>property</code>","text":"<pre><code>inventory_enabled: bool\n</code></pre> <p>Tell if the inventory is enabled or not.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Whether the inventory is enabled.</p> </li> </ul>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.plugin_enabled","title":"plugin_enabled  <code>property</code>","text":"<pre><code>plugin_enabled: bool\n</code></pre> <p>Tell if the plugin is enabled or not.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Whether the plugin is enabled.</p> </li> </ul>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.get_handler","title":"get_handler","text":"<pre><code>get_handler(handler_name: str) -&gt; BaseHandler\n</code></pre> <p>Get a handler by its name. See mkdocstrings.handlers.base.Handlers.get_handler.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>BaseHandler</code>           \u2013            <p>An instance of a subclass of <code>BaseHandler</code>.</p> </li> </ul> Source code in <code>src/mkdocstrings/plugin.py</code> <pre><code>def get_handler(self, handler_name: str) -&gt; BaseHandler:\n    \"\"\"Get a handler by its name. See [mkdocstrings.handlers.base.Handlers.get_handler][].\n\n    Arguments:\n        handler_name: The name of the handler.\n\n    Returns:\n        An instance of a subclass of [`BaseHandler`][mkdocstrings.handlers.base.BaseHandler].\n    \"\"\"\n    return self.handlers.get_handler(handler_name)\n</code></pre>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.get_handler(handler_name)","title":"<code>handler_name</code>","text":"(<code>str</code>)           \u2013            <p>The name of the handler.</p>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.on_config","title":"on_config","text":"<pre><code>on_config(config: MkDocsConfig) -&gt; MkDocsConfig | None\n</code></pre> <p>Instantiate our Markdown extension.</p> <p>Hook for the <code>on_config</code> event. In this hook, we instantiate our <code>MkdocstringsExtension</code> and add it to the list of Markdown extensions used by <code>mkdocs</code>.</p> <p>We pass this plugin's configuration dictionary to the extension when instantiating it (it will need it later when processing markdown to get handlers and their global configurations).</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>MkDocsConfig | None</code>           \u2013            <p>The modified config.</p> </li> </ul> Source code in <code>src/mkdocstrings/plugin.py</code> <pre><code>def on_config(self, config: MkDocsConfig) -&gt; MkDocsConfig | None:\n    \"\"\"Instantiate our Markdown extension.\n\n    Hook for the [`on_config` event](https://www.mkdocs.org/user-guide/plugins/#on_config).\n    In this hook, we instantiate our [`MkdocstringsExtension`][mkdocstrings.extension.MkdocstringsExtension]\n    and add it to the list of Markdown extensions used by `mkdocs`.\n\n    We pass this plugin's configuration dictionary to the extension when instantiating it (it will need it\n    later when processing markdown to get handlers and their global configurations).\n\n    Arguments:\n        config: The MkDocs config object.\n\n    Returns:\n        The modified config.\n    \"\"\"\n    if not self.plugin_enabled:\n        log.debug(\"Plugin is not enabled. Skipping.\")\n        return config\n    log.debug(\"Adding extension to the list\")\n\n    theme_name = config.theme.name or os.path.dirname(config.theme.dirs[0])\n\n    to_import: InventoryImportType = []\n    for handler_name, conf in self.config.handlers.items():\n        for import_item in conf.pop(\"import\", ()):\n            if isinstance(import_item, str):\n                import_item = {\"url\": import_item}  # noqa: PLW2901\n            to_import.append((handler_name, import_item))\n\n    extension_config = {\n        \"theme_name\": theme_name,\n        \"mdx\": config.markdown_extensions,\n        \"mdx_configs\": config.mdx_configs,\n        \"mkdocstrings\": self.config,\n        \"mkdocs\": config,\n    }\n    self._handlers = Handlers(extension_config)\n\n    autorefs: AutorefsPlugin\n    try:\n        # If autorefs plugin is explicitly enabled, just use it.\n        autorefs = config.plugins[\"autorefs\"]  # type: ignore[assignment]\n        log.debug(f\"Picked up existing autorefs instance {autorefs!r}\")\n    except KeyError:\n        # Otherwise, add a limited instance of it that acts only on what's added through `register_anchor`.\n        autorefs = AutorefsPlugin()\n        autorefs.scan_toc = False\n        config.plugins[\"autorefs\"] = autorefs\n        log.debug(f\"Added a subdued autorefs instance {autorefs!r}\")\n    # Add collector-based fallback in either case.\n    autorefs.get_fallback_anchor = self.handlers.get_anchors\n\n    mkdocstrings_extension = MkdocstringsExtension(extension_config, self.handlers, autorefs)\n    config.markdown_extensions.append(mkdocstrings_extension)  # type: ignore[arg-type]\n\n    config.extra_css.insert(0, self.css_filename)  # So that it has lower priority than user files.\n\n    self._inv_futures = {}\n    if to_import:\n        inv_loader = futures.ThreadPoolExecutor(4)\n        for handler_name, import_item in to_import:\n            loader = self.get_handler(handler_name).load_inventory\n            future = inv_loader.submit(\n                self._load_inventory,  # type: ignore[misc]\n                loader,\n                **import_item,\n            )\n            self._inv_futures[future] = (loader, import_item)\n        inv_loader.shutdown(wait=False)\n\n    return config\n</code></pre>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.on_config(config)","title":"<code>config</code>","text":"(<code>MkDocsConfig</code>)           \u2013            <p>The MkDocs config object.</p>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.on_env","title":"on_env","text":"<pre><code>on_env(\n    env: Environment,\n    config: MkDocsConfig,\n    *args: Any,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Extra actions that need to happen after all Markdown rendering and before HTML rendering.</p> <p>Hook for the <code>on_env</code> event.</p> <ul> <li>Write mkdocstrings' extra files into the site dir.</li> <li>Gather results from background inventory download tasks.</li> </ul> Source code in <code>src/mkdocstrings/plugin.py</code> <pre><code>def on_env(self, env: Environment, config: MkDocsConfig, *args: Any, **kwargs: Any) -&gt; None:  # noqa: ARG002\n    \"\"\"Extra actions that need to happen after all Markdown rendering and before HTML rendering.\n\n    Hook for the [`on_env` event](https://www.mkdocs.org/user-guide/plugins/#on_env).\n\n    - Write mkdocstrings' extra files into the site dir.\n    - Gather results from background inventory download tasks.\n    \"\"\"\n    if not self.plugin_enabled:\n        return\n    if self._handlers:\n        css_content = \"\\n\".join(handler.extra_css for handler in self.handlers.seen_handlers)\n        write_file(css_content.encode(\"utf-8\"), os.path.join(config.site_dir, self.css_filename))\n\n        if self.inventory_enabled:\n            log.debug(\"Creating inventory file objects.inv\")\n            inv_contents = self.handlers.inventory.format_sphinx()\n            write_file(inv_contents, os.path.join(config.site_dir, \"objects.inv\"))\n\n    if self._inv_futures:\n        log.debug(f\"Waiting for {len(self._inv_futures)} inventory download(s)\")\n        futures.wait(self._inv_futures, timeout=30)\n        results = {}\n        # Reversed order so that pages from first futures take precedence:\n        for fut in reversed(list(self._inv_futures)):\n            try:\n                results.update(fut.result())\n            except Exception as error:  # noqa: BLE001\n                loader, import_item = self._inv_futures[fut]\n                loader_name = loader.__func__.__qualname__\n                log.error(f\"Couldn't load inventory {import_item} through {loader_name}: {error}\")  # noqa: TRY400\n        for page, identifier in results.items():\n            config.plugins[\"autorefs\"].register_url(page, identifier)  # type: ignore[attr-defined]\n        self._inv_futures = {}\n</code></pre>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.on_post_build","title":"on_post_build","text":"<pre><code>on_post_build(config: MkDocsConfig, **kwargs: Any) -&gt; None\n</code></pre> <p>Teardown the handlers.</p> <p>Hook for the <code>on_post_build</code> event. This hook is used to teardown all the handlers that were instantiated and cached during documentation buildup.</p> <p>For example, a handler could open a subprocess in the background and keep it open to feed it \"autodoc\" instructions and get back JSON data. If so, it should then close the subprocess at some point: the proper place to do this is in the handler's <code>teardown</code> method, which is indirectly called by this hook.</p> <p>Parameters:</p> Source code in <code>src/mkdocstrings/plugin.py</code> <pre><code>def on_post_build(\n    self,\n    config: MkDocsConfig,  # noqa: ARG002\n    **kwargs: Any,  # noqa: ARG002\n) -&gt; None:\n    \"\"\"Teardown the handlers.\n\n    Hook for the [`on_post_build` event](https://www.mkdocs.org/user-guide/plugins/#on_post_build).\n    This hook is used to teardown all the handlers that were instantiated and cached during documentation buildup.\n\n    For example, a handler could open a subprocess in the background and keep it open\n    to feed it \"autodoc\" instructions and get back JSON data. If so, it should then close the subprocess at some point:\n    the proper place to do this is in the handler's `teardown` method, which is indirectly called by this hook.\n\n    Arguments:\n        config: The MkDocs config object.\n        **kwargs: Additional arguments passed by MkDocs.\n    \"\"\"\n    if not self.plugin_enabled:\n        return\n\n    for future in self._inv_futures:\n        future.cancel()\n\n    if self._handlers:\n        log.debug(\"Tearing handlers down\")\n        self.handlers.teardown()\n</code></pre>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.on_post_build(config)","title":"<code>config</code>","text":"(<code>MkDocsConfig</code>)           \u2013            <p>The MkDocs config object.</p>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.on_post_build(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional arguments passed by MkDocs.</p>"},{"location":"reference/plugin/#mkdocstrings.plugin.PluginConfig","title":"PluginConfig","text":"<p>               Bases: <code>Config</code></p> <p>The configuration options of <code>mkdocstrings</code>, written in <code>mkdocs.yml</code>.</p> <p>Attributes:</p> <ul> <li> <code>custom_templates</code>           \u2013            <p>Location of custom templates to use when rendering API objects.</p> </li> <li> <code>default_handler</code>           \u2013            <p>The default handler to use. The value is the name of the handler module. Default is \"python\".</p> </li> <li> <code>enable_inventory</code>           \u2013            <p>Whether to enable object inventory creation.</p> </li> <li> <code>enabled</code>           \u2013            <p>Whether to enable the plugin. Default is true. If false, mkdocstrings will not collect or render anything.</p> </li> <li> <code>handlers</code>           \u2013            <p>Global configuration of handlers.</p> </li> </ul>"},{"location":"reference/plugin/#mkdocstrings.plugin.PluginConfig.custom_templates","title":"custom_templates  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>custom_templates = Optional(Dir(exists=True))\n</code></pre> <p>Location of custom templates to use when rendering API objects.</p> <p>Value should be the path of a directory relative to the MkDocs configuration file.</p>"},{"location":"reference/plugin/#mkdocstrings.plugin.PluginConfig.default_handler","title":"default_handler  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_handler = Type(str, default='python')\n</code></pre> <p>The default handler to use. The value is the name of the handler module. Default is \"python\".</p>"},{"location":"reference/plugin/#mkdocstrings.plugin.PluginConfig.enable_inventory","title":"enable_inventory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>enable_inventory = Optional(Type(bool))\n</code></pre> <p>Whether to enable object inventory creation.</p>"},{"location":"reference/plugin/#mkdocstrings.plugin.PluginConfig.enabled","title":"enabled  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>enabled = Type(bool, default=True)\n</code></pre> <p>Whether to enable the plugin. Default is true. If false, mkdocstrings will not collect or render anything.</p>"},{"location":"reference/plugin/#mkdocstrings.plugin.PluginConfig.handlers","title":"handlers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>handlers = Type(dict, default={})\n</code></pre> <p>Global configuration of handlers.</p> <p>You can set global configuration per handler, applied everywhere, but overridable in each \"autodoc\" instruction. Example:</p> <pre><code>plugins:\n  - mkdocstrings:\n      handlers:\n        python:\n          options:\n            option1: true\n            option2: \"value\"\n        rust:\n          options:\n            option9: 2\n</code></pre>"},{"location":"reference/plugin/#mkdocstrings.plugin.list_to_tuple","title":"list_to_tuple","text":"<pre><code>list_to_tuple(\n    function: Callable[P, R]\n) -&gt; Callable[P, R]\n</code></pre> <p>Decorater to convert lists to tuples in the arguments.</p> Source code in <code>src/mkdocstrings/plugin.py</code> <pre><code>def list_to_tuple(function: Callable[P, R]) -&gt; Callable[P, R]:\n    \"\"\"Decorater to convert lists to tuples in the arguments.\"\"\"\n\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -&gt; R:\n        safe_args = [tuple(item) if isinstance(item, list) else item for item in args]\n        if kwargs:\n            kwargs = {key: tuple(value) if isinstance(value, list) else value for key, value in kwargs.items()}  # type: ignore[assignment]\n        return function(*safe_args, **kwargs)  # type: ignore[arg-type]\n\n    return wrapper\n</code></pre>"},{"location":"reference/handlers/","title":"mkdocstrings.handlers","text":""},{"location":"reference/handlers/#mkdocstrings.handlers","title":"handlers","text":"<p>Handlers module.</p> <p>Modules:</p> <ul> <li> <code>base</code>           \u2013            <p>Base module for handlers.</p> </li> <li> <code>rendering</code>           \u2013            <p>This module holds helpers responsible for augmentations to the Markdown sub-documents produced by handlers.</p> </li> </ul>"},{"location":"reference/handlers/base/","title":"mkdocstrings.handlers.base","text":""},{"location":"reference/handlers/base/#mkdocstrings.handlers.base","title":"base","text":"<p>Base module for handlers.</p> <p>This module contains the base classes for implementing handlers.</p> <p>Classes:</p> <ul> <li> <code>BaseHandler</code>           \u2013            <p>The base handler class.</p> </li> <li> <code>CollectionError</code>           \u2013            <p>An exception raised when some collection of data failed.</p> </li> <li> <code>Handlers</code>           \u2013            <p>A collection of handlers.</p> </li> <li> <code>ThemeNotSupported</code>           \u2013            <p>An exception raised to tell a theme is not supported.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>do_any</code>             \u2013              <p>Check if at least one of the item in the sequence evaluates to true.</p> </li> </ul>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler","title":"BaseHandler","text":"<pre><code>BaseHandler(\n    handler: str,\n    theme: str,\n    custom_templates: str | None = None,\n)\n</code></pre> <p>The base handler class.</p> <p>Inherit from this class to implement a handler.</p> <p>You will have to implement the <code>collect</code> and <code>render</code> methods. You can also implement the <code>teardown</code> method, and  override the <code>update_env</code> method, to add more filters to the Jinja environment, making them available in your Jinja templates.</p> <p>To define a fallback theme, add a <code>fallback_theme</code> class-variable. To add custom CSS, add an <code>extra_css</code> variable or create an 'style.css' file beside the templates.</p> <p>If the given theme is not supported (it does not exist), it will look for a <code>fallback_theme</code> attribute in <code>self</code> to use as a fallback theme.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>collect</code>             \u2013              <p>Collect data given an identifier and user configuration.</p> </li> <li> <code>do_convert_markdown</code>             \u2013              <p>Render Markdown text; for use inside templates.</p> </li> <li> <code>do_heading</code>             \u2013              <p>Render an HTML heading and register it for the table of contents. For use inside templates.</p> </li> <li> <code>get_anchors</code>             \u2013              <p>Return the possible identifiers (HTML anchors) for a collected item.</p> </li> <li> <code>get_extended_templates_dirs</code>             \u2013              <p>Load template extensions for the given handler, return their templates directories.</p> </li> <li> <code>get_headings</code>             \u2013              <p>Return and clear the headings gathered so far.</p> </li> <li> <code>get_templates_dir</code>             \u2013              <p>Return the path to the handler's templates directory.</p> </li> <li> <code>load_inventory</code>             \u2013              <p>Yield items and their URLs from an inventory file streamed from <code>in_file</code>.</p> </li> <li> <code>render</code>             \u2013              <p>Render a template using provided data and configuration options.</p> </li> <li> <code>teardown</code>             \u2013              <p>Teardown the handler.</p> </li> <li> <code>update_env</code>             \u2013              <p>Update the Jinja environment.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>domain</code>               (<code>str</code>)           \u2013            <p>The handler's domain, used to register objects in the inventory, for example \"py\".</p> </li> <li> <code>enable_inventory</code>               (<code>bool</code>)           \u2013            <p>Whether the inventory creation is enabled.</p> </li> <li> <code>extra_css</code>           \u2013            <p>Extra CSS.</p> </li> <li> <code>fallback_config</code>               (<code>dict</code>)           \u2013            <p>Fallback configuration when searching anchors for identifiers.</p> </li> <li> <code>fallback_theme</code>               (<code>str</code>)           \u2013            <p>Fallback theme to use when a template isn't found in the configured theme.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The handler's name, for example \"python\".</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/base.py</code> <pre><code>def __init__(self, handler: str, theme: str, custom_templates: str | None = None) -&gt; None:\n    \"\"\"Initialize the object.\n\n    If the given theme is not supported (it does not exist), it will look for a `fallback_theme` attribute\n    in `self` to use as a fallback theme.\n\n    Arguments:\n        handler: The name of the handler.\n        theme: The name of theme to use.\n        custom_templates: Directory containing custom templates.\n    \"\"\"\n    paths = []\n\n    # add selected theme templates\n    themes_dir = self.get_templates_dir(handler)\n    paths.append(themes_dir / theme)\n\n    # add extended theme templates\n    extended_templates_dirs = self.get_extended_templates_dirs(handler)\n    for templates_dir in extended_templates_dirs:\n        paths.append(templates_dir / theme)\n\n    # add fallback theme templates\n    if self.fallback_theme and self.fallback_theme != theme:\n        paths.append(themes_dir / self.fallback_theme)\n\n        # add fallback theme of extended templates\n        for templates_dir in extended_templates_dirs:\n            paths.append(templates_dir / self.fallback_theme)\n\n    for path in paths:\n        css_path = path / \"style.css\"\n        if css_path.is_file():\n            self.extra_css += \"\\n\" + css_path.read_text(encoding=\"utf-8\")\n            break\n\n    if custom_templates is not None:\n        paths.insert(0, Path(custom_templates) / handler / theme)\n\n    self.env = Environment(\n        autoescape=True,\n        loader=FileSystemLoader(paths),\n        auto_reload=False,  # Editing a template in the middle of a build is not useful.\n    )\n    self.env.filters[\"any\"] = do_any\n    self.env.globals[\"log\"] = get_template_logger(self.name)\n\n    self._headings: list[Element] = []\n    self._md: Markdown = None  # type: ignore[assignment]  # To be populated in `update_env`.\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler(handler)","title":"<code>handler</code>","text":"(<code>str</code>)           \u2013            <p>The name of the handler.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler(theme)","title":"<code>theme</code>","text":"(<code>str</code>)           \u2013            <p>The name of theme to use.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler(custom_templates)","title":"<code>custom_templates</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Directory containing custom templates.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.domain","title":"domain  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>domain: str = 'default'\n</code></pre> <p>The handler's domain, used to register objects in the inventory, for example \"py\".</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.enable_inventory","title":"enable_inventory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>enable_inventory: bool = False\n</code></pre> <p>Whether the inventory creation is enabled.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.extra_css","title":"extra_css  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra_css = ''\n</code></pre> <p>Extra CSS.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.fallback_config","title":"fallback_config  <code>class-attribute</code>","text":"<pre><code>fallback_config: dict = {}\n</code></pre> <p>Fallback configuration when searching anchors for identifiers.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.fallback_theme","title":"fallback_theme  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fallback_theme: str = ''\n</code></pre> <p>Fallback theme to use when a template isn't found in the configured theme.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = ''\n</code></pre> <p>The handler's name, for example \"python\".</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.collect","title":"collect","text":"<pre><code>collect(\n    identifier: str, config: MutableMapping[str, Any]\n) -&gt; CollectorItem\n</code></pre> <p>Collect data given an identifier and user configuration.</p> <p>In the implementation, you typically call a subprocess that returns JSON, and load that JSON again into a Python dictionary for example, though the implementation is completely free.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>CollectorItem</code>           \u2013            <p>Anything you want, as long as you can feed it to the handler's <code>render</code> method.</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/base.py</code> <pre><code>def collect(self, identifier: str, config: MutableMapping[str, Any]) -&gt; CollectorItem:\n    \"\"\"Collect data given an identifier and user configuration.\n\n    In the implementation, you typically call a subprocess that returns JSON, and load that JSON again into\n    a Python dictionary for example, though the implementation is completely free.\n\n    Arguments:\n        identifier: An identifier for which to collect data. For example, in Python,\n            it would be 'mkdocstrings.handlers' to collect documentation about the handlers module.\n            It can be anything that you can feed to the tool of your choice.\n        config: The handler's configuration options.\n\n    Returns:\n        Anything you want, as long as you can feed it to the handler's `render` method.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.collect(identifier)","title":"<code>identifier</code>","text":"(<code>str</code>)           \u2013            <p>An identifier for which to collect data. For example, in Python, it would be 'mkdocstrings.handlers' to collect documentation about the handlers module. It can be anything that you can feed to the tool of your choice.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.collect(config)","title":"<code>config</code>","text":"(<code>MutableMapping[str, Any]</code>)           \u2013            <p>The handler's configuration options.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.do_convert_markdown","title":"do_convert_markdown","text":"<pre><code>do_convert_markdown(\n    text: str,\n    heading_level: int,\n    html_id: str = \"\",\n    *,\n    strip_paragraph: bool = False,\n    autoref_hook: AutorefsHookInterface | None = None\n) -&gt; Markup\n</code></pre> <p>Render Markdown text; for use inside templates.</p> <p>Parameters:</p> <ul> <li>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.do_convert_markdown(text)","title":"<code>text</code>","text":"(<code>str</code>)           \u2013            <p>The text to convert.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.do_convert_markdown(heading_level)","title":"<code>heading_level</code>","text":"(<code>int</code>)           \u2013            <p>The base heading level to start all Markdown headings from.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.do_convert_markdown(html_id)","title":"<code>html_id</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>The HTML id of the element that's considered the parent of this element.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.do_convert_markdown(strip_paragraph)","title":"<code>strip_paragraph</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to exclude the <p> tag from around the whole output.</p> <p>Returns:</p> <ul> <li> <code>Markup</code>           \u2013            <p>An HTML string.</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/base.py</code> <pre><code>def do_convert_markdown(\n    self,\n    text: str,\n    heading_level: int,\n    html_id: str = \"\",\n    *,\n    strip_paragraph: bool = False,\n    autoref_hook: AutorefsHookInterface | None = None,\n) -&gt; Markup:\n    \"\"\"Render Markdown text; for use inside templates.\n\n    Arguments:\n        text: The text to convert.\n        heading_level: The base heading level to start all Markdown headings from.\n        html_id: The HTML id of the element that's considered the parent of this element.\n        strip_paragraph: Whether to exclude the &lt;p&gt; tag from around the whole output.\n\n    Returns:\n        An HTML string.\n    \"\"\"\n    treeprocessors = self._md.treeprocessors\n    treeprocessors[HeadingShiftingTreeprocessor.name].shift_by = heading_level  # type: ignore[attr-defined]\n    treeprocessors[IdPrependingTreeprocessor.name].id_prefix = html_id and html_id + \"--\"  # type: ignore[attr-defined]\n    treeprocessors[ParagraphStrippingTreeprocessor.name].strip = strip_paragraph  # type: ignore[attr-defined]\n\n    if autoref_hook:\n        self._md.inlinePatterns[AutorefsInlineProcessor.name].hook = autoref_hook  # type: ignore[attr-defined]\n\n    try:\n        return Markup(self._md.convert(text))\n    finally:\n        treeprocessors[HeadingShiftingTreeprocessor.name].shift_by = 0  # type: ignore[attr-defined]\n        treeprocessors[IdPrependingTreeprocessor.name].id_prefix = \"\"  # type: ignore[attr-defined]\n        treeprocessors[ParagraphStrippingTreeprocessor.name].strip = False  # type: ignore[attr-defined]\n        self._md.inlinePatterns[AutorefsInlineProcessor.name].hook = None  # type: ignore[attr-defined]\n        self._md.reset()\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.do_heading","title":"do_heading","text":"<pre><code>do_heading(\n    content: Markup,\n    heading_level: int,\n    *,\n    role: str | None = None,\n    hidden: bool = False,\n    toc_label: str | None = None,\n    **attributes: str\n) -&gt; Markup\n</code></pre> <p>Render an HTML heading and register it for the table of contents. For use inside templates.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Markup</code>           \u2013            <p>An HTML string.</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/base.py</code> <pre><code>def do_heading(\n    self,\n    content: Markup,\n    heading_level: int,\n    *,\n    role: str | None = None,\n    hidden: bool = False,\n    toc_label: str | None = None,\n    **attributes: str,\n) -&gt; Markup:\n    \"\"\"Render an HTML heading and register it for the table of contents. For use inside templates.\n\n    Arguments:\n        content: The HTML within the heading.\n        heading_level: The level of heading (e.g. 3 -&gt; `h3`).\n        role: An optional role for the object bound to this heading.\n        hidden: If True, only register it for the table of contents, don't render anything.\n        toc_label: The title to use in the table of contents ('data-toc-label' attribute).\n        **attributes: Any extra HTML attributes of the heading.\n\n    Returns:\n        An HTML string.\n    \"\"\"\n    # Produce a heading element that will be used later, in `AutoDocProcessor.run`, to:\n    # - register it in the ToC: right now we're in the inner Markdown conversion layer,\n    #   so we have to bubble up the information to the outer Markdown conversion layer,\n    #   for the ToC extension to pick it up.\n    # - register it in autorefs: right now we don't know what page is being rendered,\n    #   so we bubble up the information again to where autorefs knows the page,\n    #   and can correctly register the heading anchor (id) to its full URL.\n    # - register it in the objects inventory: same as for autorefs,\n    #   we don't know the page here, or the handler (and its domain),\n    #   so we bubble up the information to where the mkdocstrings extension knows that.\n    el = Element(f\"h{heading_level}\", attributes)\n    if toc_label is None:\n        toc_label = content.unescape() if isinstance(content, Markup) else content\n    el.set(\"data-toc-label\", toc_label)\n    if role:\n        el.set(\"data-role\", role)\n    self._headings.append(el)\n\n    if hidden:\n        return Markup('&lt;a id=\"{0}\"&gt;&lt;/a&gt;').format(attributes[\"id\"])\n\n    # Now produce the actual HTML to be rendered. The goal is to wrap the HTML content into a heading.\n    # Start with a heading that has just attributes (no text), and add a placeholder into it.\n    el = Element(f\"h{heading_level}\", attributes)\n    el.append(Element(\"mkdocstrings-placeholder\"))\n    # Tell the inner 'toc' extension to make its additions if configured so.\n    toc = cast(TocTreeprocessor, self._md.treeprocessors[\"toc\"])\n    if toc.use_anchors:\n        toc.add_anchor(el, attributes[\"id\"])\n    if toc.use_permalinks:\n        toc.add_permalink(el, attributes[\"id\"])\n\n    # The content we received is HTML, so it can't just be inserted into the tree. We had marked the middle\n    # of the heading with a placeholder that can never occur (text can't directly contain angle brackets).\n    # Now this HTML wrapper can be \"filled\" by replacing the placeholder.\n    html_with_placeholder = tostring(el, encoding=\"unicode\")\n    assert (  # noqa: S101\n        html_with_placeholder.count(\"&lt;mkdocstrings-placeholder /&gt;\") == 1\n    ), f\"Bug in mkdocstrings: failed to replace in {html_with_placeholder!r}\"\n    html = html_with_placeholder.replace(\"&lt;mkdocstrings-placeholder /&gt;\", content)\n    return Markup(html)\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.do_heading(content)","title":"<code>content</code>","text":"(<code>Markup</code>)           \u2013            <p>The HTML within the heading.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.do_heading(heading_level)","title":"<code>heading_level</code>","text":"(<code>int</code>)           \u2013            <p>The level of heading (e.g. 3 -&gt; <code>h3</code>).</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.do_heading(role)","title":"<code>role</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional role for the object bound to this heading.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.do_heading(hidden)","title":"<code>hidden</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, only register it for the table of contents, don't render anything.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.do_heading(toc_label)","title":"<code>toc_label</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The title to use in the table of contents ('data-toc-label' attribute).</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.do_heading(**attributes)","title":"<code>**attributes</code>","text":"(<code>str</code>, default:                   <code>{}</code> )           \u2013            <p>Any extra HTML attributes of the heading.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.get_anchors","title":"get_anchors","text":"<pre><code>get_anchors(data: CollectorItem) -&gt; tuple[str, ...]\n</code></pre> <p>Return the possible identifiers (HTML anchors) for a collected item.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>tuple[str, ...]</code>           \u2013            <p>The HTML anchors (without '#'), or an empty tuple if this item doesn't have an anchor.</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/base.py</code> <pre><code>def get_anchors(self, data: CollectorItem) -&gt; tuple[str, ...]:  # noqa: ARG002\n    \"\"\"Return the possible identifiers (HTML anchors) for a collected item.\n\n    Arguments:\n        data: The collected data.\n\n    Returns:\n        The HTML anchors (without '#'), or an empty tuple if this item doesn't have an anchor.\n    \"\"\"\n    return ()\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.get_anchors(data)","title":"<code>data</code>","text":"(<code>CollectorItem</code>)           \u2013            <p>The collected data.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.get_extended_templates_dirs","title":"get_extended_templates_dirs","text":"<pre><code>get_extended_templates_dirs(handler: str) -&gt; list[Path]\n</code></pre> <p>Load template extensions for the given handler, return their templates directories.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[Path]</code>           \u2013            <p>The extensions templates directories.</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/base.py</code> <pre><code>def get_extended_templates_dirs(self, handler: str) -&gt; list[Path]:\n    \"\"\"Load template extensions for the given handler, return their templates directories.\n\n    Arguments:\n        handler: The name of the handler to get the extended templates directory of.\n\n    Returns:\n        The extensions templates directories.\n    \"\"\"\n    discovered_extensions = entry_points(group=f\"mkdocstrings.{handler}.templates\")\n    return [extension.load()() for extension in discovered_extensions]\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.get_extended_templates_dirs(handler)","title":"<code>handler</code>","text":"(<code>str</code>)           \u2013            <p>The name of the handler to get the extended templates directory of.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.get_headings","title":"get_headings","text":"<pre><code>get_headings() -&gt; Sequence[Element]\n</code></pre> <p>Return and clear the headings gathered so far.</p> <p>Returns:</p> <ul> <li> <code>Sequence[Element]</code>           \u2013            <p>A list of HTML elements.</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/base.py</code> <pre><code>def get_headings(self) -&gt; Sequence[Element]:\n    \"\"\"Return and clear the headings gathered so far.\n\n    Returns:\n        A list of HTML elements.\n    \"\"\"\n    result = list(self._headings)\n    self._headings.clear()\n    return result\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.get_templates_dir","title":"get_templates_dir","text":"<pre><code>get_templates_dir(handler: str | None = None) -&gt; Path\n</code></pre> <p>Return the path to the handler's templates directory.</p> <p>Override to customize how the templates directory is found.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ModuleNotFoundError</code>             \u2013            <p>When no such handler is installed.</p> </li> <li> <code>FileNotFoundError</code>             \u2013            <p>When the templates directory cannot be found.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Path</code>           \u2013            <p>The templates directory path.</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/base.py</code> <pre><code>def get_templates_dir(self, handler: str | None = None) -&gt; Path:\n    \"\"\"Return the path to the handler's templates directory.\n\n    Override to customize how the templates directory is found.\n\n    Arguments:\n        handler: The name of the handler to get the templates directory of.\n\n    Raises:\n        ModuleNotFoundError: When no such handler is installed.\n        FileNotFoundError: When the templates directory cannot be found.\n\n    Returns:\n        The templates directory path.\n    \"\"\"\n    handler = handler or self.name\n    try:\n        import mkdocstrings_handlers\n    except ModuleNotFoundError as error:\n        raise ModuleNotFoundError(f\"Handler '{handler}' not found, is it installed?\") from error\n\n    for path in mkdocstrings_handlers.__path__:\n        theme_path = Path(path, handler, \"templates\")\n        if theme_path.exists():\n            return theme_path\n\n    raise FileNotFoundError(f\"Can't find 'templates' folder for handler '{handler}'\")\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.get_templates_dir(handler)","title":"<code>handler</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The name of the handler to get the templates directory of.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.load_inventory","title":"load_inventory  <code>classmethod</code>","text":"<pre><code>load_inventory(\n    in_file: BinaryIO,\n    url: str,\n    base_url: str | None = None,\n    **kwargs: Any,\n) -&gt; Iterator[tuple[str, str]]\n</code></pre> <p>Yield items and their URLs from an inventory file streamed from <code>in_file</code>.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str</code>           \u2013            <p>Tuples of (item identifier, item URL).</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/base.py</code> <pre><code>@classmethod\ndef load_inventory(\n    cls,\n    in_file: BinaryIO,  # noqa: ARG003\n    url: str,  # noqa: ARG003\n    base_url: str | None = None,  # noqa: ARG003\n    **kwargs: Any,  # noqa: ARG003\n) -&gt; Iterator[tuple[str, str]]:\n    \"\"\"Yield items and their URLs from an inventory file streamed from `in_file`.\n\n    Arguments:\n        in_file: The binary file-like object to read the inventory from.\n        url: The URL that this file is being streamed from (used to guess `base_url`).\n        base_url: The URL that this inventory's sub-paths are relative to.\n        **kwargs: Ignore additional arguments passed from the config.\n\n    Yields:\n        Tuples of (item identifier, item URL).\n    \"\"\"\n    yield from ()\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.load_inventory(in_file)","title":"<code>in_file</code>","text":"(<code>BinaryIO</code>)           \u2013            <p>The binary file-like object to read the inventory from.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.load_inventory(url)","title":"<code>url</code>","text":"(<code>str</code>)           \u2013            <p>The URL that this file is being streamed from (used to guess <code>base_url</code>).</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.load_inventory(base_url)","title":"<code>base_url</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The URL that this inventory's sub-paths are relative to.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.load_inventory(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Ignore additional arguments passed from the config.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.render","title":"render","text":"<pre><code>render(\n    data: CollectorItem, config: Mapping[str, Any]\n) -&gt; str\n</code></pre> <p>Render a template using provided data and configuration options.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The rendered template as HTML.</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/base.py</code> <pre><code>def render(self, data: CollectorItem, config: Mapping[str, Any]) -&gt; str:\n    \"\"\"Render a template using provided data and configuration options.\n\n    Arguments:\n        data: The collected data to render.\n        config: The handler's configuration options.\n\n    Returns:\n        The rendered template as HTML.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.render(data)","title":"<code>data</code>","text":"(<code>CollectorItem</code>)           \u2013            <p>The collected data to render.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.render(config)","title":"<code>config</code>","text":"(<code>Mapping[str, Any]</code>)           \u2013            <p>The handler's configuration options.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.teardown","title":"teardown","text":"<pre><code>teardown() -&gt; None\n</code></pre> <p>Teardown the handler.</p> <p>This method should be implemented to, for example, terminate a subprocess that was started when creating the handler instance.</p> Source code in <code>src/mkdocstrings/handlers/base.py</code> <pre><code>def teardown(self) -&gt; None:\n    \"\"\"Teardown the handler.\n\n    This method should be implemented to, for example, terminate a subprocess\n    that was started when creating the handler instance.\n    \"\"\"\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.update_env","title":"update_env","text":"<pre><code>update_env(md: Markdown, config: dict) -&gt; None\n</code></pre> <p>Update the Jinja environment.</p> <p>Parameters:</p> Source code in <code>src/mkdocstrings/handlers/base.py</code> <pre><code>def update_env(self, md: Markdown, config: dict) -&gt; None:  # noqa: ARG002\n    \"\"\"Update the Jinja environment.\n\n    Arguments:\n        md: The Markdown instance. Useful to add functions able to convert Markdown into the environment filters.\n        config: Configuration options for `mkdocs` and `mkdocstrings`, read from `mkdocs.yml`. See the source code\n            of [mkdocstrings.plugin.MkdocstringsPlugin.on_config][] to see what's in this dictionary.\n    \"\"\"\n    self._md = md\n    self.env.filters[\"highlight\"] = Highlighter(md).highlight\n    self.env.filters[\"convert_markdown\"] = self.do_convert_markdown\n    self.env.filters[\"heading\"] = self.do_heading\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.update_env(md)","title":"<code>md</code>","text":"(<code>Markdown</code>)           \u2013            <p>The Markdown instance. Useful to add functions able to convert Markdown into the environment filters.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.update_env(config)","title":"<code>config</code>","text":"(<code>dict</code>)           \u2013            <p>Configuration options for <code>mkdocs</code> and <code>mkdocstrings</code>, read from <code>mkdocs.yml</code>. See the source code of mkdocstrings.plugin.MkdocstringsPlugin.on_config to see what's in this dictionary.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.CollectionError","title":"CollectionError","text":"<p>               Bases: <code>Exception</code></p> <p>An exception raised when some collection of data failed.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers","title":"Handlers","text":"<pre><code>Handlers(config: dict)\n</code></pre> <p>A collection of handlers.</p> <p>Do not instantiate this directly. The plugin will keep one instance of this for the purpose of caching. Use mkdocstrings.plugin.MkdocstringsPlugin.get_handler for convenient access.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>get_anchors</code>             \u2013              <p>Return the canonical HTML anchor for the identifier, if any of the seen handlers can collect it.</p> </li> <li> <code>get_handler</code>             \u2013              <p>Get a handler thanks to its name.</p> </li> <li> <code>get_handler_config</code>             \u2013              <p>Return the global configuration of the given handler.</p> </li> <li> <code>get_handler_name</code>             \u2013              <p>Return the handler name defined in an \"autodoc\" instruction YAML configuration, or the global default handler.</p> </li> <li> <code>teardown</code>             \u2013              <p>Teardown all cached handlers and clear the cache.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>seen_handlers</code>               (<code>Iterable[BaseHandler]</code>)           \u2013            <p>Get the handlers that were encountered so far throughout the build.</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/base.py</code> <pre><code>def __init__(self, config: dict) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Arguments:\n        config: Configuration options for `mkdocs` and `mkdocstrings`, read from `mkdocs.yml`. See the source code\n            of [mkdocstrings.plugin.MkdocstringsPlugin.on_config][] to see what's in this dictionary.\n    \"\"\"\n    self._config = config\n    self._handlers: dict[str, BaseHandler] = {}\n    self.inventory: Inventory = Inventory(project=self._config[\"mkdocs\"][\"site_name\"])\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers(config)","title":"<code>config</code>","text":"(<code>dict</code>)           \u2013            <p>Configuration options for <code>mkdocs</code> and <code>mkdocstrings</code>, read from <code>mkdocs.yml</code>. See the source code of mkdocstrings.plugin.MkdocstringsPlugin.on_config to see what's in this dictionary.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers.seen_handlers","title":"seen_handlers  <code>property</code>","text":"<pre><code>seen_handlers: Iterable[BaseHandler]\n</code></pre> <p>Get the handlers that were encountered so far throughout the build.</p> <p>Returns:</p> <ul> <li> <code>Iterable[BaseHandler]</code>           \u2013            <p>An iterable of instances of <code>BaseHandler</code></p> </li> <li> <code>Iterable[BaseHandler]</code>           \u2013            <p>(usable only to loop through it).</p> </li> </ul>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers.get_anchors","title":"get_anchors","text":"<pre><code>get_anchors(identifier: str) -&gt; tuple[str, ...]\n</code></pre> <p>Return the canonical HTML anchor for the identifier, if any of the seen handlers can collect it.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>tuple[str, ...]</code>           \u2013            <p>A tuple of strings - anchors without '#', or an empty tuple if there isn't any identifier familiar with it.</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/base.py</code> <pre><code>def get_anchors(self, identifier: str) -&gt; tuple[str, ...]:\n    \"\"\"Return the canonical HTML anchor for the identifier, if any of the seen handlers can collect it.\n\n    Arguments:\n        identifier: The identifier (one that [collect][mkdocstrings.handlers.base.BaseHandler.collect] can accept).\n\n    Returns:\n        A tuple of strings - anchors without '#', or an empty tuple if there isn't any identifier familiar with it.\n    \"\"\"\n    for handler in self._handlers.values():\n        fallback_config = getattr(handler, \"fallback_config\", {})\n        try:\n            anchors = handler.get_anchors(handler.collect(identifier, fallback_config))\n        except CollectionError:\n            continue\n        if anchors:\n            return anchors\n    return ()\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers.get_anchors(identifier)","title":"<code>identifier</code>","text":"(<code>str</code>)           \u2013            <p>The identifier (one that collect can accept).</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers.get_handler","title":"get_handler","text":"<pre><code>get_handler(\n    name: str, handler_config: dict | None = None\n) -&gt; BaseHandler\n</code></pre> <p>Get a handler thanks to its name.</p> <p>This function dynamically imports a module named \"mkdocstrings.handlers.NAME\", calls its <code>get_handler</code> method to get an instance of a handler, and caches it in dictionary. It means that during one run (for each reload when serving, or once when building), a handler is instantiated only once, and reused for each \"autodoc\" instruction asking for it.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>BaseHandler</code>           \u2013            <p>An instance of a subclass of <code>BaseHandler</code>, as instantiated by the <code>get_handler</code> method of the handler's module.</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/base.py</code> <pre><code>def get_handler(self, name: str, handler_config: dict | None = None) -&gt; BaseHandler:\n    \"\"\"Get a handler thanks to its name.\n\n    This function dynamically imports a module named \"mkdocstrings.handlers.NAME\", calls its\n    `get_handler` method to get an instance of a handler, and caches it in dictionary.\n    It means that during one run (for each reload when serving, or once when building),\n    a handler is instantiated only once, and reused for each \"autodoc\" instruction asking for it.\n\n    Arguments:\n        name: The name of the handler. Really, it's the name of the Python module holding it.\n        handler_config: Configuration passed to the handler.\n\n    Returns:\n        An instance of a subclass of [`BaseHandler`][mkdocstrings.handlers.base.BaseHandler],\n            as instantiated by the `get_handler` method of the handler's module.\n    \"\"\"\n    if name not in self._handlers:\n        if handler_config is None:\n            handler_config = self.get_handler_config(name)\n        handler_config.update(self._config)\n        module = importlib.import_module(f\"mkdocstrings_handlers.{name}\")\n        self._handlers[name] = module.get_handler(\n            theme=self._config[\"theme_name\"],\n            custom_templates=self._config[\"mkdocstrings\"][\"custom_templates\"],\n            config_file_path=self._config[\"mkdocs\"][\"config_file_path\"],\n            **handler_config,\n        )\n    return self._handlers[name]\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers.get_handler(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The name of the handler. Really, it's the name of the Python module holding it.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers.get_handler(handler_config)","title":"<code>handler_config</code>","text":"(<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>Configuration passed to the handler.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers.get_handler_config","title":"get_handler_config","text":"<pre><code>get_handler_config(name: str) -&gt; dict\n</code></pre> <p>Return the global configuration of the given handler.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The global configuration of the given handler. It can be an empty dictionary.</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/base.py</code> <pre><code>def get_handler_config(self, name: str) -&gt; dict:\n    \"\"\"Return the global configuration of the given handler.\n\n    Arguments:\n        name: The name of the handler to get the global configuration of.\n\n    Returns:\n        The global configuration of the given handler. It can be an empty dictionary.\n    \"\"\"\n    handlers = self._config[\"mkdocstrings\"].get(\"handlers\", {})\n    if handlers:\n        return handlers.get(name, {})\n    return {}\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers.get_handler_config(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The name of the handler to get the global configuration of.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers.get_handler_name","title":"get_handler_name","text":"<pre><code>get_handler_name(config: dict) -&gt; str\n</code></pre> <p>Return the handler name defined in an \"autodoc\" instruction YAML configuration, or the global default handler.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The name of the handler to use.</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/base.py</code> <pre><code>def get_handler_name(self, config: dict) -&gt; str:\n    \"\"\"Return the handler name defined in an \"autodoc\" instruction YAML configuration, or the global default handler.\n\n    Arguments:\n        config: A configuration dictionary, obtained from YAML below the \"autodoc\" instruction.\n\n    Returns:\n        The name of the handler to use.\n    \"\"\"\n    global_config = self._config[\"mkdocstrings\"]\n    if \"handler\" in config:\n        return config[\"handler\"]\n    return global_config[\"default_handler\"]\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers.get_handler_name(config)","title":"<code>config</code>","text":"(<code>dict</code>)           \u2013            <p>A configuration dictionary, obtained from YAML below the \"autodoc\" instruction.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers.teardown","title":"teardown","text":"<pre><code>teardown() -&gt; None\n</code></pre> <p>Teardown all cached handlers and clear the cache.</p> Source code in <code>src/mkdocstrings/handlers/base.py</code> <pre><code>def teardown(self) -&gt; None:\n    \"\"\"Teardown all cached handlers and clear the cache.\"\"\"\n    for handler in self.seen_handlers:\n        handler.teardown()\n    self._handlers.clear()\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.ThemeNotSupported","title":"ThemeNotSupported","text":"<p>               Bases: <code>Exception</code></p> <p>An exception raised to tell a theme is not supported.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.do_any","title":"do_any","text":"<pre><code>do_any(seq: Sequence, attribute: str | None = None) -&gt; bool\n</code></pre> <p>Check if at least one of the item in the sequence evaluates to true.</p> <p>The <code>any</code> builtin as a filter for Jinja templates.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>A boolean telling if any object of the iterable evaluated to True.</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/base.py</code> <pre><code>def do_any(seq: Sequence, attribute: str | None = None) -&gt; bool:\n    \"\"\"Check if at least one of the item in the sequence evaluates to true.\n\n    The `any` builtin as a filter for Jinja templates.\n\n    Arguments:\n        seq: An iterable object.\n        attribute: The attribute name to use on each object of the iterable.\n\n    Returns:\n        A boolean telling if any object of the iterable evaluated to True.\n    \"\"\"\n    if attribute is None:\n        return any(seq)\n    return any(_[attribute] for _ in seq)\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.do_any(seq)","title":"<code>seq</code>","text":"(<code>Sequence</code>)           \u2013            <p>An iterable object.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.do_any(attribute)","title":"<code>attribute</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The attribute name to use on each object of the iterable.</p>"},{"location":"reference/handlers/rendering/","title":"mkdocstrings.handlers.rendering","text":""},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering","title":"rendering","text":"<p>This module holds helpers responsible for augmentations to the Markdown sub-documents produced by handlers.</p> <p>Classes:</p> <ul> <li> <code>HeadingShiftingTreeprocessor</code>           \u2013            <p>Shift levels of all Markdown headings according to the configured base level.</p> </li> <li> <code>Highlighter</code>           \u2013            <p>Code highlighter that tries to match the Markdown configuration.</p> </li> <li> <code>IdPrependingTreeprocessor</code>           \u2013            <p>Prepend the configured prefix to IDs of all HTML elements.</p> </li> <li> <code>MkdocstringsInnerExtension</code>           \u2013            <p>Extension that should always be added to Markdown sub-documents that handlers request (and only them).</p> </li> <li> <code>ParagraphStrippingTreeprocessor</code>           \u2013            <p>Unwraps the <p> element around the whole output.</p>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.HeadingShiftingTreeprocessor","title":"HeadingShiftingTreeprocessor","text":"<pre><code>HeadingShiftingTreeprocessor(md: Markdown, shift_by: int)\n</code></pre> <p>               Bases: <code>Treeprocessor</code></p> <p>Shift levels of all Markdown headings according to the configured base level.</p> <p>Parameters:</p> <p>Attributes:</p> <ul> <li> <code>shift_by</code>               (<code>int</code>)           \u2013            <p>The number of heading \"levels\" to add to every heading. <code>&lt;h2&gt;</code> with <code>shift_by = 3</code> becomes <code>&lt;h5&gt;</code>.</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/rendering.py</code> <pre><code>def __init__(self, md: Markdown, shift_by: int):\n    \"\"\"Initialize the object.\n\n    Arguments:\n        md: A `markdown.Markdown` instance.\n        shift_by: The number of heading \"levels\" to add to every heading.\n    \"\"\"\n    super().__init__(md)\n    self.shift_by = shift_by\n</code></pre>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.HeadingShiftingTreeprocessor(md)","title":"<code>md</code>","text":"(<code>Markdown</code>)           \u2013            <p>A <code>markdown.Markdown</code> instance.</p>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.HeadingShiftingTreeprocessor(shift_by)","title":"<code>shift_by</code>","text":"(<code>int</code>)           \u2013            <p>The number of heading \"levels\" to add to every heading.</p>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.HeadingShiftingTreeprocessor.shift_by","title":"shift_by  <code>instance-attribute</code>","text":"<pre><code>shift_by: int = shift_by\n</code></pre> <p>The number of heading \"levels\" to add to every heading. <code>&lt;h2&gt;</code> with <code>shift_by = 3</code> becomes <code>&lt;h5&gt;</code>.</p>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.Highlighter","title":"Highlighter","text":"<pre><code>Highlighter(md: Markdown)\n</code></pre> <p>               Bases: <code>Highlight</code></p> <p>Code highlighter that tries to match the Markdown configuration.</p> <p>Picking up the global config and defaults works only if you use the <code>codehilite</code> or <code>pymdownx.highlight</code> (recommended) Markdown extension.</p> <ul> <li> <p>If you use <code>pymdownx.highlight</code>, highlighting settings are picked up from it, and the     default CSS class is <code>.highlight</code>. This also means the default of <code>guess_lang: false</code>.</p> </li> <li> <p>Otherwise, if you use the <code>codehilite</code> extension, settings are picked up from it, and the     default CSS class is <code>.codehilite</code>. Also consider setting <code>guess_lang: false</code>.</p> </li> <li> <p>If neither are added to <code>markdown_extensions</code>, highlighting is enabled anyway. This is for     backwards compatibility. If you really want to disable highlighting even in mkdocstrings,     add one of these extensions anyway and set <code>use_pygments: false</code>.</p> </li> </ul> <p>The underlying implementation is <code>pymdownx.highlight</code> regardless.</p> <p>Parameters:</p> <ul> <li> </li> </ul> <p>Methods:</p> <ul> <li> <code>highlight</code>             \u2013              <p>Highlight a code-snippet.</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/rendering.py</code> <pre><code>def __init__(self, md: Markdown):\n    \"\"\"Configure to match a `markdown.Markdown` instance.\n\n    Arguments:\n        md: The Markdown instance to read configs from.\n    \"\"\"\n    config: dict[str, Any] = {}\n    self._highlighter: str | None = None\n    for ext in md.registeredExtensions:\n        if isinstance(ext, HighlightExtension) and (ext.enabled or not config):\n            self._highlighter = \"highlight\"\n            config = ext.getConfigs()\n            break  # This one takes priority, no need to continue looking\n        if isinstance(ext, CodeHiliteExtension) and not config:\n            self._highlighter = \"codehilite\"\n            config = ext.getConfigs()\n            config[\"language_prefix\"] = config[\"lang_prefix\"]\n    self._css_class = config.pop(\"css_class\", \"highlight\")\n    super().__init__(**{name: opt for name, opt in config.items() if name in self._highlight_config_keys})\n</code></pre>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.Highlighter(md)","title":"<code>md</code>","text":"(<code>Markdown</code>)           \u2013            <p>The Markdown instance to read configs from.</p>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.Highlighter.highlight","title":"highlight","text":"<pre><code>highlight(\n    src: str,\n    language: str | None = None,\n    *,\n    inline: bool = False,\n    dedent: bool = True,\n    linenums: bool | None = None,\n    **kwargs: Any\n) -&gt; str\n</code></pre> <p>Highlight a code-snippet.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The highlighted code as HTML text, marked safe (not escaped for HTML).</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/rendering.py</code> <pre><code>def highlight(\n    self,\n    src: str,\n    language: str | None = None,\n    *,\n    inline: bool = False,\n    dedent: bool = True,\n    linenums: bool | None = None,\n    **kwargs: Any,\n) -&gt; str:\n    \"\"\"Highlight a code-snippet.\n\n    Arguments:\n        src: The code to highlight.\n        language: Explicitly tell what language to use for highlighting.\n        inline: Whether to highlight as inline.\n        dedent: Whether to dedent the code before highlighting it or not.\n        linenums: Whether to add line numbers in the result.\n        **kwargs: Pass on to `pymdownx.highlight.Highlight.highlight`.\n\n    Returns:\n        The highlighted code as HTML text, marked safe (not escaped for HTML).\n    \"\"\"\n    if isinstance(src, Markup):\n        src = src.unescape()\n    if dedent:\n        src = textwrap.dedent(src)\n\n    kwargs.setdefault(\"css_class\", self._css_class)\n    old_linenums = self.linenums  # type: ignore[has-type]\n    if linenums is not None:\n        self.linenums = linenums\n    try:\n        result = super().highlight(src, language, inline=inline, **kwargs)\n    finally:\n        self.linenums = old_linenums\n\n    if inline:\n        # From the maintainer of codehilite, the codehilite CSS class, as defined by the user,\n        # should never be added to inline code, because codehilite does not support inline code.\n        # See https://github.com/Python-Markdown/markdown/issues/1220#issuecomment-1692160297.\n        css_class = \"\" if self._highlighter == \"codehilite\" else kwargs[\"css_class\"]\n        return Markup(f'&lt;code class=\"{css_class} language-{language}\"&gt;{result.text}&lt;/code&gt;')\n    return Markup(result)\n</code></pre>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.Highlighter.highlight(src)","title":"<code>src</code>","text":"(<code>str</code>)           \u2013            <p>The code to highlight.</p>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.Highlighter.highlight(language)","title":"<code>language</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Explicitly tell what language to use for highlighting.</p>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.Highlighter.highlight(inline)","title":"<code>inline</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to highlight as inline.</p>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.Highlighter.highlight(dedent)","title":"<code>dedent</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to dedent the code before highlighting it or not.</p>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.Highlighter.highlight(linenums)","title":"<code>linenums</code>","text":"(<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Whether to add line numbers in the result.</p>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.Highlighter.highlight(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Pass on to <code>pymdownx.highlight.Highlight.highlight</code>.</p>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.IdPrependingTreeprocessor","title":"IdPrependingTreeprocessor","text":"<pre><code>IdPrependingTreeprocessor(md: Markdown, id_prefix: str)\n</code></pre> <p>               Bases: <code>Treeprocessor</code></p> <p>Prepend the configured prefix to IDs of all HTML elements.</p> <p>Parameters:</p> <p>Attributes:</p> <ul> <li> <code>id_prefix</code>               (<code>str</code>)           \u2013            <p>The prefix to add to every ID. It is prepended without any separator; specify your own separator if needed.</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/rendering.py</code> <pre><code>def __init__(self, md: Markdown, id_prefix: str):\n    \"\"\"Initialize the object.\n\n    Arguments:\n        md: A `markdown.Markdown` instance.\n        id_prefix: The prefix to add to every ID. It is prepended without any separator.\n    \"\"\"\n    super().__init__(md)\n    self.id_prefix = id_prefix\n</code></pre>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.IdPrependingTreeprocessor(md)","title":"<code>md</code>","text":"(<code>Markdown</code>)           \u2013            <p>A <code>markdown.Markdown</code> instance.</p>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.IdPrependingTreeprocessor(id_prefix)","title":"<code>id_prefix</code>","text":"(<code>str</code>)           \u2013            <p>The prefix to add to every ID. It is prepended without any separator.</p>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.IdPrependingTreeprocessor.id_prefix","title":"id_prefix  <code>instance-attribute</code>","text":"<pre><code>id_prefix: str = id_prefix\n</code></pre> <p>The prefix to add to every ID. It is prepended without any separator; specify your own separator if needed.</p>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.MkdocstringsInnerExtension","title":"MkdocstringsInnerExtension","text":"<pre><code>MkdocstringsInnerExtension(headings: list[Element])\n</code></pre> <p>               Bases: <code>Extension</code></p> <p>Extension that should always be added to Markdown sub-documents that handlers request (and only them).</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>extendMarkdown</code>             \u2013              <p>Register the extension.</p> </li> </ul> Source code in <code>src/mkdocstrings/handlers/rendering.py</code> <pre><code>def __init__(self, headings: list[Element]):\n    \"\"\"Initialize the object.\n\n    Arguments:\n        headings: A list that will be populated with all HTML heading elements encountered in the document.\n    \"\"\"\n    super().__init__()\n    self.headings = headings\n</code></pre>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.MkdocstringsInnerExtension(headings)","title":"<code>headings</code>","text":"(<code>list[Element]</code>)           \u2013            <p>A list that will be populated with all HTML heading elements encountered in the document.</p>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.MkdocstringsInnerExtension.extendMarkdown","title":"extendMarkdown","text":"<pre><code>extendMarkdown(md: Markdown) -&gt; None\n</code></pre> <p>Register the extension.</p> <p>Parameters:</p> Source code in <code>src/mkdocstrings/handlers/rendering.py</code> <pre><code>def extendMarkdown(self, md: Markdown) -&gt; None:  # noqa: N802 (casing: parent method's name)\n    \"\"\"Register the extension.\n\n    Arguments:\n        md: A `markdown.Markdown` instance.\n    \"\"\"\n    md.registerExtension(self)\n    md.treeprocessors.register(\n        HeadingShiftingTreeprocessor(md, 0),\n        HeadingShiftingTreeprocessor.name,\n        priority=12,\n    )\n    md.treeprocessors.register(\n        IdPrependingTreeprocessor(md, \"\"),\n        IdPrependingTreeprocessor.name,\n        priority=4,  # Right after 'toc' (needed because that extension adds ids to headers).\n    )\n    md.treeprocessors.register(\n        _HeadingReportingTreeprocessor(md, self.headings),\n        _HeadingReportingTreeprocessor.name,\n        priority=1,  # Close to the end.\n    )\n    md.treeprocessors.register(\n        ParagraphStrippingTreeprocessor(md),\n        ParagraphStrippingTreeprocessor.name,\n        priority=0.99,  # Close to the end.\n    )\n</code></pre>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.MkdocstringsInnerExtension.extendMarkdown(md)","title":"<code>md</code>","text":"(<code>Markdown</code>)           \u2013            <p>A <code>markdown.Markdown</code> instance.</p>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.ParagraphStrippingTreeprocessor","title":"ParagraphStrippingTreeprocessor","text":"<p>               Bases: <code>Treeprocessor</code></p> <p>Unwraps the <p> element around the whole output.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#autodoc-syntax","title":"Autodoc syntax","text":"<p>mkdocstrings works by processing special expressions in your Markdown files.</p> <p>The syntax is as follows:</p> <pre><code>::: identifier\n    YAML block\n</code></pre> <p>Resources on YAML</p> <p> YAML can sometimes be a bit tricky, particularly on indentation. Here are some resources that other users found useful to better understand YAML's peculiarities.</p> <ul> <li>YAML idiosyncrasies</li> <li>YAML multiline</li> </ul> <p>The <code>identifier</code> is a string identifying the object you want to document. The format of an identifier can vary from one handler to another. For example, the Python handler expects the full dotted-path to a Python object: <code>my_package.my_module.MyClass.my_method</code>.</p> <p>The YAML block is optional, and contains some configuration options:</p> <ul> <li><code>handler</code>: the name of the handler to use to collect and render this object.   By default, it will use the value defined in the Global options's   <code>default_handler</code> key, or <code>\"python\"</code>.</li> <li><code>options</code>: a dictionary of options passed to the handler's methods responsible both   for collecting and rendering the documentation. These options can be defined   globally (in <code>mkdocs.yml</code>, see Global options),    locally (as described here), or both. </li> </ul> <p>Example with the Python handler</p> docs/my_page.mdmkdocs.ymlsrc/my_package/my_module.pyResult <pre><code># Documentation for `MyClass`\n\n::: my_package.my_module.MyClass\n    handler: python\n    options:\n      members:\n        - method_a\n        - method_b\n      show_root_heading: false\n      show_source: false\n</code></pre> <pre><code>nav:\n  - \"My page\": my_page.md\n</code></pre> <pre><code>class MyClass:\n    \"\"\"Print print print!\"\"\"\n\n    def method_a(self):\n        \"\"\"Print A!\"\"\"\n        print(\"A!\")\n\n    def method_b(self):\n        \"\"\"Print B!\"\"\"\n        print(\"B!\")\n\n    def method_c(self):\n        \"\"\"Print C!\"\"\"\n        print(\"C!\")\n</code></pre> <p></p> <p>It is also possible to integrate a mkdocstrings identifier into a Markdown header:</p> <pre><code>## ::: my_package.my_module.MyClass\n    options:\n      show_source: false\n</code></pre> <p>The above is equivalent to:</p> <pre><code>::: my_package.my_module.MyClass\n    options:\n      show_source: false\n      heading_level: 2\n</code></pre>"},{"location":"usage/#documentation-for-myclass","title":"Documentation for <code>MyClass</code>","text":"<p>Print print print!</p>"},{"location":"usage/#mkdocstrings.my_module.MyClass.method_a","title":"<code> method_a(self) </code>","text":"<p>Print A!</p>"},{"location":"usage/#mkdocstrings.my_module.MyClass.method_b","title":"<code> method_b(self) </code>","text":"<p>Print B!</p>"},{"location":"usage/#global-options","title":"Global options","text":"<p>mkdocstrings accepts a few top-level configuration options in <code>mkdocs.yml</code>:</p> <ul> <li><code>default_handler</code>: The handler that is used by default when no handler is specified.</li> <li><code>custom_templates</code>: The path to a directory containing custom templates.   The path is relative to the MkDocs configuration file.   See Theming.</li> <li><code>handlers</code>: The handlers' global configuration.</li> <li><code>enable_inventory</code>: Whether to enable inventory file generation.   See Cross-references to other projects / inventories</li> <li><code>enabled</code> (New in version 0.20): Whether to enable the plugin. Defaults to <code>true</code>.   Can be used to reduce build times when doing local development.   Especially useful when used with environment variables (see example below).</li> </ul> <p>Example</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    enabled: !ENV [ENABLE_MKDOCSTRINGS, true]\n    custom_templates: templates\n    default_handler: python\n    handlers:\n      python:\n        options:\n          show_source: false\n</code></pre> <p>The handlers global configuration can then be overridden by local configurations:</p> docs/some_page.md<pre><code>::: my_package.my_module.MyClass\n    options:\n      show_source: true\n</code></pre> <p>Some handlers accept additional global configuration. Check the documentation for your handler of interest in Handlers.</p>"},{"location":"usage/#cross-references","title":"Cross-references","text":"<p>Cross-references are written as Markdown reference-style links:</p> MarkdownHTML Result <pre><code>With a custom title:\n[`Object 1`][full.path.object1]\n\nWith the identifier as title:\n[full.path.object2][]\n</code></pre> <pre><code>&lt;p&gt;With a custom title:\n&lt;a href=\"https://example.com/page1#full.path.object1\"&gt;&lt;code&gt;Object 1&lt;/code&gt;&lt;/a&gt;&lt;p&gt;\n&lt;p&gt;With the identifier as title:\n&lt;a href=\"https://example.com/page2#full.path.object2\"&gt;full.path.object2&lt;/a&gt;&lt;/p&gt;\n</code></pre> <p>Any item that was inserted using the autodoc syntax (e.g. <code>::: full.path.object1</code>) is possible to link to by using the same identifier with the cross-reference syntax (<code>[example][full.path.object1]</code>). But the cross-references are also applicable to the items' children that get pulled in.</p>"},{"location":"usage/#finding-out-the-anchor","title":"Finding out the anchor","text":"<p>If you're not sure which exact identifier a doc item uses, you can look at its \"anchor\", which your Web browser will show in the URL bar when clicking an item's entry in the table of contents. If the URL is <code>https://example.com/some/page.html#full.path.object1</code> then you know that this item is possible to link to with <code>[example][full.path.object1]</code>, regardless of the current page.</p>"},{"location":"usage/#cross-references-to-any-markdown-heading","title":"Cross-references to any Markdown heading","text":"<p>Changed in version 0.15</p> <p>Linking to any Markdown heading used to be the default, but now opt-in is required.</p> <p>If you want to link to any Markdown heading, not just mkdocstrings-inserted items, please enable the autorefs plugin for MkDocs by adding <code>autorefs</code> to <code>plugins</code>:</p> mkdocs.yml<pre><code>plugins:\n- search\n- autorefs\n- mkdocstrings:\n    [...]\n</code></pre> <p>Note that you don't need to (<code>pip</code>) install anything more; this plugin is guaranteed to be pulled in with mkdocstrings.</p> <p>Example</p> doc1.mddoc2.mdResult HTML for doc2 <pre><code>## Hello, world!\n\nTesting\n</code></pre> <pre><code>## Something else\n\nPlease see the [Hello, World!][hello-world] section.\n</code></pre> <pre><code>&lt;p&gt;Please see the &lt;a href=\"doc1.html#hello-world\"&gt;Hello, World!&lt;/a&gt; section.&lt;/p&gt;\n</code></pre>"},{"location":"usage/#cross-references-to-a-sub-heading-in-a-docstring","title":"Cross-references to a sub-heading in a docstring","text":"<p>New in version 0.14</p> <p>If you have a Markdown heading inside your docstring, you can also link directly to it. In the example below you see the identifier to be linked is <code>foo.bar--tips</code>, because it's the \"Tips\" heading that's part of the <code>foo.bar</code> object, joined with \"<code>--</code>\".</p> <p>Example</p> foo.pydoc1.mddoc2.mdHTML result for doc2 <pre><code>def bar():\n    \"\"\"Hello, world!\n\n    # Tips\n\n    - Stay hydrated.\n    \"\"\"\n</code></pre> <pre><code>::: foo.bar\n</code></pre> <pre><code>Check out the [tips][foo.bar--tips]\n</code></pre> <pre><code>&lt;p&gt;Check out the &lt;a href=\"doc1.html#foo.bar--tips\"&gt;tips&lt;/a&gt;&lt;/p&gt;\n</code></pre> <p>The above tip about Finding out the anchor also applies the same way here.</p> <p>You may also notice that such a heading does not get rendered as a <code>&lt;h1&gt;</code> element directly, but rather the level gets shifted to fit the encompassing document structure. If you're curious about the implementation, check out mkdocstrings.handlers.rendering.HeadingShiftingTreeprocessor and others.</p>"},{"location":"usage/#cross-references-to-other-projects-inventories","title":"Cross-references to other projects / inventories","text":"<p>New in version 0.16</p> <p>Python developers coming from Sphinx might know about its <code>intersphinx</code> extension, that allows to cross-reference items between several projects. mkdocstrings has a similar feature.</p> <p>To reference an item from another project, you must first tell mkdocstrings to load the inventory it provides. Each handler will be responsible of loading inventories specific to its language. For example, the Python handler can load Sphinx-generated inventories (<code>objects.inv</code>).</p> <p>In the following snippet, we load the inventory provided by <code>installer</code>:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        import:\n        - https://installer.readthedocs.io/en/stable/objects.inv\n</code></pre> <p>Now it is possible to cross-reference <code>installer</code>'s items. For example:</p> MarkdownResult (HTML)Result (displayed) <pre><code>See [installer.records][] to learn about records.\n</code></pre> <pre><code>&lt;p&gt;See &lt;a href=\"https://installer.readthedocs.io/en/stable/api/records/#module-installer.records\"&gt;installer.records&lt;/a&gt;\nto learn about records.&lt;/p&gt;\n</code></pre> <p>See installer.records to learn about records.</p> <p>You can of course select another version of the inventory, for example:</p> <pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        import:\n        # latest instead of stable\n        - https://installer.readthedocs.io/en/latest/objects.inv\n</code></pre> <p>In case the inventory file is not served under the base documentation URL, you can explicitly specify both URLs:</p> <pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        import:\n        - url: https://cdn.example.com/version/objects.inv\n          base_url: https://docs.example.com/version\n</code></pre> <p>Absolute URLs to cross-referenced items will then be based on <code>https://docs.example.com/version/</code> instead of <code>https://cdn.example.com/version/</code>.</p> <p>Reciprocally, mkdocstrings also allows to generate an inventory file in the Sphinx format. It will be enabled by default if the Python handler is used, and generated as <code>objects.inv</code> in the final site directory. Other projects will be able to cross-reference items from your project.</p> <p>To explicitly enable or disable the generation of the inventory file, use the global <code>enable_inventory</code> option:</p> <pre><code>plugins:\n- mkdocstrings:\n    enable_inventory: false\n</code></pre>"},{"location":"usage/handlers/","title":"Handlers","text":"<p>A handler is what makes it possible to collect and render documentation for a particular language.</p>"},{"location":"usage/handlers/#available-handlers","title":"Available handlers","text":"<ul> <li>C </li> <li>Crystal</li> <li>Python</li> <li>Python (Legacy)</li> <li>Shell </li> <li>TypeScript </li> <li>VBA</li> </ul>"},{"location":"usage/handlers/#about-the-python-handlers","title":"About the Python handlers","text":"<p>Since version 0.18, a new, experimental Python handler is available. It is based on Griffe, which is an improved version of pytkdocs.</p> <p>Note that the experimental handler does not yet support all third-party libraries that the legacy handler supported.</p> <p>If you want to keep using the legacy handler as long as possible, you can depend on <code>mkdocstrings-python-legacy</code> directly, or specify the <code>python-legacy</code> extra when depending on mkdocstrings:</p> pyproject.toml<pre><code># PEP 621 dependencies declaration\n# adapt to your dependencies manager\n[project]\ndependencies = [\n    \"mkdocstrings[python-legacy]&gt;=0.18\",\n]\n</code></pre> <p>The legacy handler will continue to \"work\" for many releases, as long as the new handler does not cover all previous use-cases.</p>"},{"location":"usage/handlers/#migrate-to-the-experimental-python-handler","title":"Migrate to the experimental Python handler","text":"<p>To use the new, experimental Python handler, you can depend on <code>mkdocstrings-python</code> directly, or specify the <code>python</code> extra when depending on mkdocstrings:</p> pyproject.toml<pre><code># PEP 621 dependencies declaration\n# adapt to your dependencies manager\n[project]\ndependencies = [\n    \"mkdocstrings[python]&gt;=0.18\",\n]\n</code></pre>"},{"location":"usage/handlers/#selection-options","title":"Selection options","text":"<p>Warning</p> <p>Since mkdocstrings 0.19, the YAML <code>selection</code> key is merged into the <code>options</code> key.</p> <ul> <li> <code>filters</code> is implemented, and used as before.</li> <li> <code>members</code> is implemented, and used as before.</li> <li> <code>inherited_members</code> is implemented.</li> <li> <code>docstring_style</code> is implemented, and used as before,   except for the <code>restructured-text</code> style which is renamed <code>sphinx</code>.   Numpy-style is now built-in, so you can stop depending on <code>pytkdocs[numpy-style]</code>   or <code>docstring_parser</code>.</li> <li> <code>docstring_options</code> is implemented, and used as before.   Refer to the <code>griffe</code> documentation   for the updated list of supported docstring options.</li> <li> <code>new_path_syntax</code> is irrelevant now. If you were setting it to True,   remove the option and replace every colon (<code>:</code>) in your autodoc identifiers   by dots (<code>.</code>).</li> </ul> <p>See all the handler's options.</p>"},{"location":"usage/handlers/#rendering-options","title":"Rendering options","text":"<p>Warning</p> <p>Since mkdocstrings 0.19, the YAML <code>rendering</code> key is merged into the <code>options</code> key.</p> <p>Every previous option is supported. Additional options are available:</p> <ul> <li> <code>separate_signature</code>: Render the signature (or attribute value) in a code block below the heading,   instead as inline code. Useful for long signatures. If Black is installed,   the signature is formatted. Default: <code>False</code>.</li> <li> <code>line_length</code>: The maximum line length to use when formatting signatures. Default: <code>60</code>.</li> <li> <code>show_submodules</code>: Whether to render submodules of a module when iterating on children.   Default: <code>False</code>.</li> <li> <code>docstring_section_style</code>: The style to use to render docstring sections such as attributes,   parameters, etc. Available styles: <code>\"table\"</code> (default), <code>\"list\"</code> and <code>\"spacy\"</code>. The SpaCy style   is a poor implementation of their table style.   We are open to improvements through PRs!</li> </ul> <p>See all the handler's options.</p>"},{"location":"usage/handlers/#templates","title":"Templates","text":"<p>Templates are mostly the same as before, but the file layout has changed, as well as some file names. See the documentation about the Python handler templates.</p>"},{"location":"usage/handlers/#custom-handlers","title":"Custom handlers","text":"<p>Since version 0.14, you can create and use custom handlers thanks to namespace packages. For more information about namespace packages, see their documentation.</p> <p>TL;DR - Project template for handlers</p> <p>mkdocstrings provides a Copier template to kickstart new handlers: https://github.com/mkdocstrings/handler-template. To use it, install Copier (<code>pipx install copier</code>), then run <code>copier gh:mkdocstrings/handler-template my_handler</code> to generate a new project. See its upstream documentation to learn how to work on the generated project.</p>"},{"location":"usage/handlers/#packaging","title":"Packaging","text":"<p>For mkdocstrings, a custom handler package would have the following structure:</p> <pre><code>\ud83d\udcc1 your_repository\n\u2514\u2500\u2574\ud83d\udcc1 mkdocstrings_handlers\n   \u2514\u2500\u2574\ud83d\udcc1 custom_handler\n      \u251c\u2500\u2574\ud83d\udcc1 templates\n      \u2502\u00a0 \u251c\u2500\u2574\ud83d\udcc1 material\n      \u2502  \u251c\u2500\u2574\ud83d\udcc1 mkdocs\n      \u2502  \u2514\u2500\u2574\ud83d\udcc1 readthedocs\n      \u2514\u2500\u2574\ud83d\udcc4 __init__.py\n</code></pre> <p>Note the absence of <code>__init__.py</code> module in <code>mkdocstrings_handlers</code>!</p>"},{"location":"usage/handlers/#code","title":"Code","text":"<p>A handler is a subclass of the base handler provided by mkdocstrings.</p> <p>See the documentation for the <code>BaseHandler</code>. Subclasses of the base handler must implement the <code>collect</code> and <code>render</code> methods at least. The <code>collect</code> method is responsible for collecting and returning data (extracting documentation from source code, loading introspecting objects in memory, other sources? etc.) while the <code>render</code> method is responsible for actually rendering the data to HTML, using the Jinja templates provided by your package.</p> <p>You must implement a <code>get_handler</code> method at the module level. This function takes the following parameters:</p> <ul> <li><code>theme</code> (string, theme name)</li> <li><code>custom_templates</code> (optional string, path to custom templates directory)</li> <li><code>config_file_path</code> (optional string, path to the config file)</li> </ul> <p>These arguments are all passed as keyword arguments, so you can ignore them by adding <code>**kwargs</code> or similar to your signature. You can also accept additional parameters: the handler's global-only options and/or the root config options. This gives flexibility and access to the mkdocs config, mkdocstring config etc.. You should never modify the root config but can use it to get information about the MkDocs instance such as where the current <code>site_dir</code> lives. See the Mkdocs Configuration for more info about what is accessible from it.</p> <p>Check out how the Python handler is written for inspiration.</p>"},{"location":"usage/handlers/#templates_1","title":"Templates","text":"<p>Your handler's implementation should normally be backed by templates, which go to the directory <code>mkdocstrings_handlers/custom_handler/templates/some_theme</code> (<code>custom_handler</code> here should be replaced with the actual name of your handler, and <code>some_theme</code> should be the name of an actual MkDocs theme that you support, e.g. <code>material</code>).</p> <p>With that structure, you can use <code>self.env.get_template(\"foo.html\")</code> inside your <code>render</code> method. This already chooses the subdirectory based on the current MkDocs theme.</p> <p>If you wish to support any MkDocs theme, rather than a few specifically selected ones, you can pick one theme's subdirectory to be the fallback for when an unknown theme is encountered. Then you just need to set the <code>fallback_theme</code> variable on your handler subclass. The fallback directory can be used even for themes you explicitly support: you can omit some template from one of the other theme directories in case they're exactly the same as in the fallback theme.</p> <p>If your theme's HTML requires CSS to go along with it, put it into a file named <code>mkdocstrings_handlers/custom_handler/templates/some_theme/style.css</code>, then this will be included into the final site automatically if this handler is ever used. Alternatively, you can put the CSS as a string into the <code>extra_css</code> variable of your handler.</p> <p>Finally, it's possible to entirely omit templates, and tell mkdocstrings to use the templates of another handler. In you handler, override the <code>get_templates_dir()</code> method to return the other handlers templates path:</p> <pre><code>from pathlib import Path\nfrom mkdocstrings.handlers.base import BaseHandler\n\n\nclass CobraHandler(BaseHandler):\n    def get_templates_dir(self, handler: str | None = None) -&gt; Path:\n        # use the python handler templates\n        # (it assumes the python handler is installed)\n        return super().get_templates_dir(\"python\")\n</code></pre>"},{"location":"usage/handlers/#usage","title":"Usage","text":"<p>When a custom handler is installed, it is then available to mkdocstrings. You can configure it as usual:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      custom_handler:\n        handler_config_option: yes\n        options:\n          some_config_option: \"a\"\n          other_config_option: 0\n</code></pre> <p>...and use it in your autodoc instructions:</p> docs/some_page.md<pre><code># Documentation for an object\n\n::: some.objects.path\n    handler: custom_handler\n    options:\n      some_config_option: \"b\"\n      other_config_option: 1\n</code></pre>"},{"location":"usage/handlers/#handler-extensions","title":"Handler extensions","text":"<p>mkdocstrings provides a way for third-party packages to extend or alter the behavior of handlers. For example, an extension of the Python handler could add specific support for another Python library.</p> <p>Note</p> <p>This feature is intended for developers. If you are a user and want to customize how objects are rendered, see Theming / Customization.</p> <p>Such extensions can register additional template folders that will be used when rendering collected data. Extensions are responsible for synchronizing with the handler itself so that it uses the additional templates.</p> <p>An extension is a Python package that defines an entry-point for a specific handler:</p> pyproject.toml<pre><code>[project.entry-points.\"mkdocstrings.python.templates\"] # (1)!\nextension-name = \"extension_package:get_templates_path\" # (2)!\n</code></pre> <ol> <li>Replace <code>python</code> by the name of the handler you want to add templates to.</li> <li>Replace <code>extension-name</code> by any name you want,     and replace <code>extension_package:get_templates_path</code>     by the actual module path and function name in your package.</li> </ol> <p>This entry-point assumes that the extension provides a <code>get_templates_path</code> function directly under the <code>extension_package</code> package:</p> <pre><code> pyproject.toml\n\ud83d\udcc1 extension_package/\n\u251c\u2500\u2500  __init__.py\n\u2514\u2500\u2500 \ud83d\udcc1 templates/\n</code></pre> extension_package/__init__.py<pre><code>from pathlib import Path\n\n\ndef get_templates_path() -&gt; Path:\n    return Path(__file__).parent / \"templates\"\n</code></pre> <p>This function doesn't accept any argument and returns the path (<code>pathlib.Path</code> or <code>str</code>) to a directory containing templates. The directory must contain one subfolder for each supported theme, even if empty (see \"fallback theme\" in custom handlers templates). For example:</p> <pre><code> pyproject.toml\n\ud83d\udcc1 extension_package/\n\u251c\u2500\u2500  __init__.py\n\u2514\u2500\u2500 \ud83d\udcc1 templates/\n    \u251c\u2500\u2500 \ud83d\udcc1 material/\n    \u251c\u2500\u2500 \ud83d\udcc1 readthedocs/\n    \u2514\u2500\u2500 \ud83d\udcc1 mkdocs/\n</code></pre> <p>mkdocstrings will add the folders corresponding to the user-selected theme, and to the handler's defined fallback theme, as usual.</p> <p>The names of the extension templates must not overlap with the handler's original templates.</p> <p>The extension is then responsible, in collaboration with its target handler, for mutating the collected data in order to instruct the handler to use one of the extension template when rendering particular objects. See each handler's docs to see if they support extensions, and how.</p>"},{"location":"usage/theming/","title":"Themes","text":"<p>mkdocstrings can support multiple MkDocs themes. It currently supports the Material for MkDocs theme and, partially, the built-in MkDocs and ReadTheDocs themes.</p> <p>Each handler can fallback to a particular theme when the user selected theme is not supported. For example, the Python handler will fallback to the Material for MkDocs templates.</p>"},{"location":"usage/theming/#customization","title":"Customization","text":"<p>There is some degree of customization possible in mkdocstrings. First, you can write custom templates to override the theme templates. Second, the provided templates make use of CSS classes, so you can tweak the look and feel with extra CSS rules.</p>"},{"location":"usage/theming/#templates","title":"Templates","text":"<p>To use custom templates and override the theme ones, specify the relative path from your configuration file to your templates directory with the <code>custom_templates</code> global configuration option:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    custom_templates: templates\n</code></pre> <p>Your directory structure must be identical to the provided templates one:</p> <pre><code>\ud83d\udcc1 templates/\n\u251c\u2500\u2574\ud83d\udcc1 &lt;HANDLER 1&gt;/\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 &lt;THEME 1&gt;/\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 &lt;THEME 2&gt;/\n\u2514\u2500\u2500 \ud83d\udcc1 &lt;HANDLER 2&gt;/\n    \u251c\u2500\u2500 \ud83d\udcc1 &lt;THEME 1&gt;/\n    \u2514\u2500\u2500 \ud83d\udcc1 &lt;THEME 2&gt;/\n</code></pre> <p>For example, check out the Python template tree on GitHub.</p> <p>You don't have to replicate the whole tree, only the handlers, themes or templates you want to override. For example, to override some templates of the Material theme for Python:</p> <pre><code>\ud83d\udcc1 templates/\n\u2514\u2500\u2500 \ud83d\udcc1 python/\n    \u2514\u2500\u2500 \ud83d\udcc1 material/\n        \u251c\u2500\u2500 \ud83d\udcc4 parameters.html\n        \u2514\u2500\u2500 \ud83d\udcc4 exceptions.html\n</code></pre> <p>In the HTML files, replace the original contents with your modified version. In the future, the templates will use Jinja blocks, so it will be easier to modify small part of the templates without copy-pasting the whole files.</p> <p>See the documentation about templates for:</p> <ul> <li>the Crystal handler: https://mkdocstrings.github.io/crystal/styling.html</li> <li>the Python handler: https://mkdocstrings.github.io/python/usage/customization/#templates</li> </ul>"},{"location":"usage/theming/#debugging","title":"Debugging","text":"<p>Every template has access to a <code>log</code> function, allowing to log messages as usual:</p> <pre><code>{{ log.debug(\"A DEBUG message.\") }}\n{{ log.info(\"An INFO message.\") }}\n{{ log.warning(\"A WARNING message.\") }}\n{{ log.error(\"An ERROR message.\") }}\n{{ log.critical(\"A CRITICAL message.\") }}\n</code></pre>"},{"location":"usage/theming/#css-classes","title":"CSS classes","text":"<p>Since each handler provides its own set of templates, with their own CSS classes, we cannot list them all here. See the documentation about CSS classes for:</p> <ul> <li>the Crystal handler: https://mkdocstrings.github.io/crystal/styling.html#custom-styles</li> <li>the Python handler: https://mkdocstrings.github.io/python/usage/customization/#css-classes</li> </ul>"},{"location":"usage/theming/#syntax-highlighting","title":"Syntax highlighting","text":"<p>Code blocks that occur in the docstring of an item inserted with mkdocstrings, as well as code blocks (such as Source code) that mkdocstrings inserts itself, are syntax-highlighted according to the same rules as other normal code blocks in your document. See more details in mkdocstrings.handlers.rendering.Highlighter.</p> <p>As for the CSS class used for code blocks -- it will also match the \"normal\" config, so the default (<code>.codehilite</code> or <code>.highlight</code>) will match your chosen Markdown extension for highlighting.</p> <p>Changed in version 0.15</p> <p>The CSS class used to always be <code>.highlight</code>, but now it depends on the configuration.</p> <p>Long story short, you probably should add <code>pymdownx.highlight</code> to your <code>markdown_extensions</code>, and then use <code>.doc-contents .highlight</code> as the CSS selector in case you want to change something about mkdocstrings' code blocks specifically.</p>"},{"location":"coverage/","title":"Coverage report","text":""}]}